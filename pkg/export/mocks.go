// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package export

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockExporter creates a new instance of MockExporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExporter {
	mock := &MockExporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExporter is an autogenerated mock type for the Exporter type
type MockExporter struct {
	mock.Mock
}

type MockExporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExporter) EXPECT() *MockExporter_Expecter {
	return &MockExporter_Expecter{mock: &_m.Mock}
}

// ExportDockerArtifacts provides a mock function for the type MockExporter
func (_mock *MockExporter) ExportDockerArtifacts(inputPath string, outputPath string, baseImage string, envVars []string) error {
	ret := _mock.Called(inputPath, outputPath, baseImage, envVars)

	if len(ret) == 0 {
		panic("no return value specified for ExportDockerArtifacts")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, []string) error); ok {
		r0 = returnFunc(inputPath, outputPath, baseImage, envVars)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExporter_ExportDockerArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportDockerArtifacts'
type MockExporter_ExportDockerArtifacts_Call struct {
	*mock.Call
}

// ExportDockerArtifacts is a helper method to define mock.On call
//   - inputPath
//   - outputPath
//   - baseImage
//   - envVars
func (_e *MockExporter_Expecter) ExportDockerArtifacts(inputPath interface{}, outputPath interface{}, baseImage interface{}, envVars interface{}) *MockExporter_ExportDockerArtifacts_Call {
	return &MockExporter_ExportDockerArtifacts_Call{Call: _e.mock.On("ExportDockerArtifacts", inputPath, outputPath, baseImage, envVars)}
}

func (_c *MockExporter_ExportDockerArtifacts_Call) Run(run func(inputPath string, outputPath string, baseImage string, envVars []string)) *MockExporter_ExportDockerArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *MockExporter_ExportDockerArtifacts_Call) Return(err error) *MockExporter_ExportDockerArtifacts_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExporter_ExportDockerArtifacts_Call) RunAndReturn(run func(inputPath string, outputPath string, baseImage string, envVars []string) error) *MockExporter_ExportDockerArtifacts_Call {
	_c.Call.Return(run)
	return _c
}
