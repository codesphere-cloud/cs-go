// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package exporter

import (
	"context"
	"github.com/codesphere-cloud/cs-go/pkg/ci"
	mock "github.com/stretchr/testify/mock"
)

// NewMockExporter creates a new instance of MockExporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExporter {
	mock := &MockExporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExporter is an autogenerated mock type for the Exporter type
type MockExporter struct {
	mock.Mock
}

type MockExporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExporter) EXPECT() *MockExporter_Expecter {
	return &MockExporter_Expecter{mock: &_m.Mock}
}

// ExportDockerArtifacts provides a mock function for the type MockExporter
func (_mock *MockExporter) ExportDockerArtifacts() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExportDockerArtifacts")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExporter_ExportDockerArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportDockerArtifacts'
type MockExporter_ExportDockerArtifacts_Call struct {
	*mock.Call
}

// ExportDockerArtifacts is a helper method to define mock.On call
func (_e *MockExporter_Expecter) ExportDockerArtifacts() *MockExporter_ExportDockerArtifacts_Call {
	return &MockExporter_ExportDockerArtifacts_Call{Call: _e.mock.On("ExportDockerArtifacts")}
}

func (_c *MockExporter_ExportDockerArtifacts_Call) Run(run func()) *MockExporter_ExportDockerArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExporter_ExportDockerArtifacts_Call) Return(err error) *MockExporter_ExportDockerArtifacts_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExporter_ExportDockerArtifacts_Call) RunAndReturn(run func() error) *MockExporter_ExportDockerArtifacts_Call {
	_c.Call.Return(run)
	return _c
}

// ExportImages provides a mock function for the type MockExporter
func (_mock *MockExporter) ExportImages(ctx context.Context, registry string, imagePrefix string) error {
	ret := _mock.Called(ctx, registry, imagePrefix)

	if len(ret) == 0 {
		panic("no return value specified for ExportImages")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, registry, imagePrefix)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExporter_ExportImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportImages'
type MockExporter_ExportImages_Call struct {
	*mock.Call
}

// ExportImages is a helper method to define mock.On call
//   - ctx
//   - registry
//   - imagePrefix
func (_e *MockExporter_Expecter) ExportImages(ctx interface{}, registry interface{}, imagePrefix interface{}) *MockExporter_ExportImages_Call {
	return &MockExporter_ExportImages_Call{Call: _e.mock.On("ExportImages", ctx, registry, imagePrefix)}
}

func (_c *MockExporter_ExportImages_Call) Run(run func(ctx context.Context, registry string, imagePrefix string)) *MockExporter_ExportImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockExporter_ExportImages_Call) Return(err error) *MockExporter_ExportImages_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExporter_ExportImages_Call) RunAndReturn(run func(ctx context.Context, registry string, imagePrefix string) error) *MockExporter_ExportImages_Call {
	_c.Call.Return(run)
	return _c
}

// ExportKubernetesArtifacts provides a mock function for the type MockExporter
func (_mock *MockExporter) ExportKubernetesArtifacts(registry string, image string, namespace string, pullSecret string, hostname string, ingressClass string) error {
	ret := _mock.Called(registry, image, namespace, pullSecret, hostname, ingressClass)

	if len(ret) == 0 {
		panic("no return value specified for ExportKubernetesArtifacts")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string, string) error); ok {
		r0 = returnFunc(registry, image, namespace, pullSecret, hostname, ingressClass)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExporter_ExportKubernetesArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportKubernetesArtifacts'
type MockExporter_ExportKubernetesArtifacts_Call struct {
	*mock.Call
}

// ExportKubernetesArtifacts is a helper method to define mock.On call
//   - registry
//   - image
//   - namespace
//   - pullSecret
//   - hostname
//   - ingressClass
func (_e *MockExporter_Expecter) ExportKubernetesArtifacts(registry interface{}, image interface{}, namespace interface{}, pullSecret interface{}, hostname interface{}, ingressClass interface{}) *MockExporter_ExportKubernetesArtifacts_Call {
	return &MockExporter_ExportKubernetesArtifacts_Call{Call: _e.mock.On("ExportKubernetesArtifacts", registry, image, namespace, pullSecret, hostname, ingressClass)}
}

func (_c *MockExporter_ExportKubernetesArtifacts_Call) Run(run func(registry string, image string, namespace string, pullSecret string, hostname string, ingressClass string)) *MockExporter_ExportKubernetesArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockExporter_ExportKubernetesArtifacts_Call) Return(err error) *MockExporter_ExportKubernetesArtifacts_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExporter_ExportKubernetesArtifacts_Call) RunAndReturn(run func(registry string, image string, namespace string, pullSecret string, hostname string, ingressClass string) error) *MockExporter_ExportKubernetesArtifacts_Call {
	_c.Call.Return(run)
	return _c
}

// ReadYmlFile provides a mock function for the type MockExporter
func (_mock *MockExporter) ReadYmlFile(path string) (*ci.CiYml, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ReadYmlFile")
	}

	var r0 *ci.CiYml
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*ci.CiYml, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *ci.CiYml); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ci.CiYml)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExporter_ReadYmlFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadYmlFile'
type MockExporter_ReadYmlFile_Call struct {
	*mock.Call
}

// ReadYmlFile is a helper method to define mock.On call
//   - path
func (_e *MockExporter_Expecter) ReadYmlFile(path interface{}) *MockExporter_ReadYmlFile_Call {
	return &MockExporter_ReadYmlFile_Call{Call: _e.mock.On("ReadYmlFile", path)}
}

func (_c *MockExporter_ReadYmlFile_Call) Run(run func(path string)) *MockExporter_ReadYmlFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExporter_ReadYmlFile_Call) Return(ciYml *ci.CiYml, err error) *MockExporter_ReadYmlFile_Call {
	_c.Call.Return(ciYml, err)
	return _c
}

func (_c *MockExporter_ReadYmlFile_Call) RunAndReturn(run func(path string) (*ci.CiYml, error)) *MockExporter_ReadYmlFile_Call {
	_c.Call.Return(run)
	return _c
}
