// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package io

import (
	"context"
	mock "github.com/stretchr/testify/mock"
	"net/http"
)

// NewMockHttpServer creates a new instance of MockHttpServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHttpServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHttpServer {
	mock := &MockHttpServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHttpServer is an autogenerated mock type for the HttpServer type
type MockHttpServer struct {
	mock.Mock
}

type MockHttpServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHttpServer) EXPECT() *MockHttpServer_Expecter {
	return &MockHttpServer_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockHttpServer
func (_mock *MockHttpServer) Handle(pattern string, handler http.Handler) {
	_mock.Called(pattern, handler)
	return
}

// MockHttpServer_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockHttpServer_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - pattern
//   - handler
func (_e *MockHttpServer_Expecter) Handle(pattern interface{}, handler interface{}) *MockHttpServer_Handle_Call {
	return &MockHttpServer_Handle_Call{Call: _e.mock.On("Handle", pattern, handler)}
}

func (_c *MockHttpServer_Handle_Call) Run(run func(pattern string, handler http.Handler)) *MockHttpServer_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.Handler))
	})
	return _c
}

func (_c *MockHttpServer_Handle_Call) Return() *MockHttpServer_Handle_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHttpServer_Handle_Call) RunAndReturn(run func(pattern string, handler http.Handler)) *MockHttpServer_Handle_Call {
	_c.Run(run)
	return _c
}

// HandleFunc provides a mock function for the type MockHttpServer
func (_mock *MockHttpServer) HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request)) {
	_mock.Called(pattern, handler)
	return
}

// MockHttpServer_HandleFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleFunc'
type MockHttpServer_HandleFunc_Call struct {
	*mock.Call
}

// HandleFunc is a helper method to define mock.On call
//   - pattern
//   - handler
func (_e *MockHttpServer_Expecter) HandleFunc(pattern interface{}, handler interface{}) *MockHttpServer_HandleFunc_Call {
	return &MockHttpServer_HandleFunc_Call{Call: _e.mock.On("HandleFunc", pattern, handler)}
}

func (_c *MockHttpServer_HandleFunc_Call) Run(run func(pattern string, handler func(http.ResponseWriter, *http.Request))) *MockHttpServer_HandleFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(http.ResponseWriter, *http.Request)))
	})
	return _c
}

func (_c *MockHttpServer_HandleFunc_Call) Return() *MockHttpServer_HandleFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHttpServer_HandleFunc_Call) RunAndReturn(run func(pattern string, handler func(http.ResponseWriter, *http.Request))) *MockHttpServer_HandleFunc_Call {
	_c.Run(run)
	return _c
}

// ListenAndServe provides a mock function for the type MockHttpServer
func (_mock *MockHttpServer) ListenAndServe(addr string, handler http.Handler) error {
	ret := _mock.Called(addr, handler)

	if len(ret) == 0 {
		panic("no return value specified for ListenAndServe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, http.Handler) error); ok {
		r0 = returnFunc(addr, handler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHttpServer_ListenAndServe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListenAndServe'
type MockHttpServer_ListenAndServe_Call struct {
	*mock.Call
}

// ListenAndServe is a helper method to define mock.On call
//   - addr
//   - handler
func (_e *MockHttpServer_Expecter) ListenAndServe(addr interface{}, handler interface{}) *MockHttpServer_ListenAndServe_Call {
	return &MockHttpServer_ListenAndServe_Call{Call: _e.mock.On("ListenAndServe", addr, handler)}
}

func (_c *MockHttpServer_ListenAndServe_Call) Run(run func(addr string, handler http.Handler)) *MockHttpServer_ListenAndServe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.Handler))
	})
	return _c
}

func (_c *MockHttpServer_ListenAndServe_Call) Return(err error) *MockHttpServer_ListenAndServe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHttpServer_ListenAndServe_Call) RunAndReturn(run func(addr string, handler http.Handler) error) *MockHttpServer_ListenAndServe_Call {
	_c.Call.Return(run)
	return _c
}

// Redirect provides a mock function for the type MockHttpServer
func (_mock *MockHttpServer) Redirect(w http.ResponseWriter, r *http.Request, url string, code int) {
	_mock.Called(w, r, url, code)
	return
}

// MockHttpServer_Redirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redirect'
type MockHttpServer_Redirect_Call struct {
	*mock.Call
}

// Redirect is a helper method to define mock.On call
//   - w
//   - r
//   - url
//   - code
func (_e *MockHttpServer_Expecter) Redirect(w interface{}, r interface{}, url interface{}, code interface{}) *MockHttpServer_Redirect_Call {
	return &MockHttpServer_Redirect_Call{Call: _e.mock.On("Redirect", w, r, url, code)}
}

func (_c *MockHttpServer_Redirect_Call) Run(run func(w http.ResponseWriter, r *http.Request, url string, code int)) *MockHttpServer_Redirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockHttpServer_Redirect_Call) Return() *MockHttpServer_Redirect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHttpServer_Redirect_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, url string, code int)) *MockHttpServer_Redirect_Call {
	_c.Run(run)
	return _c
}

// NewMockExec creates a new instance of MockExec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExec(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExec {
	mock := &MockExec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExec is an autogenerated mock type for the Exec type
type MockExec struct {
	mock.Mock
}

type MockExec_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExec) EXPECT() *MockExec_Expecter {
	return &MockExec_Expecter{mock: &_m.Mock}
}

// ExecuteCommand provides a mock function for the type MockExec
func (_mock *MockExec) ExecuteCommand(ctx context.Context, cmdArgs []string) (int, error) {
	ret := _mock.Called(ctx, cmdArgs)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCommand")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) (int, error)); ok {
		return returnFunc(ctx, cmdArgs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) int); ok {
		r0 = returnFunc(ctx, cmdArgs)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, cmdArgs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExec_ExecuteCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteCommand'
type MockExec_ExecuteCommand_Call struct {
	*mock.Call
}

// ExecuteCommand is a helper method to define mock.On call
//   - ctx
//   - cmdArgs
func (_e *MockExec_Expecter) ExecuteCommand(ctx interface{}, cmdArgs interface{}) *MockExec_ExecuteCommand_Call {
	return &MockExec_ExecuteCommand_Call{Call: _e.mock.On("ExecuteCommand", ctx, cmdArgs)}
}

func (_c *MockExec_ExecuteCommand_Call) Run(run func(ctx context.Context, cmdArgs []string)) *MockExec_ExecuteCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockExec_ExecuteCommand_Call) Return(n int, err error) *MockExec_ExecuteCommand_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockExec_ExecuteCommand_Call) RunAndReturn(run func(ctx context.Context, cmdArgs []string) (int, error)) *MockExec_ExecuteCommand_Call {
	_c.Call.Return(run)
	return _c
}
