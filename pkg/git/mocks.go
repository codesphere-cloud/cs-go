// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package git

import (
	"github.com/codesphere-cloud/cs-go/pkg/cs"
	"github.com/go-git/go-git/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGit creates a new instance of MockGit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGit(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGit {
	mock := &MockGit{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGit is an autogenerated mock type for the Git type
type MockGit struct {
	mock.Mock
}

type MockGit_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGit) EXPECT() *MockGit_Expecter {
	return &MockGit_Expecter{mock: &_m.Mock}
}

// CloneRepository provides a mock function for the type MockGit
func (_mock *MockGit) CloneRepository(fs *cs.FileSystem, url string, branch string, path string) (*git.Repository, error) {
	ret := _mock.Called(fs, url, branch, path)

	if len(ret) == 0 {
		panic("no return value specified for CloneRepository")
	}

	var r0 *git.Repository
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cs.FileSystem, string, string, string) (*git.Repository, error)); ok {
		return returnFunc(fs, url, branch, path)
	}
	if returnFunc, ok := ret.Get(0).(func(*cs.FileSystem, string, string, string) *git.Repository); ok {
		r0 = returnFunc(fs, url, branch, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Repository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*cs.FileSystem, string, string, string) error); ok {
		r1 = returnFunc(fs, url, branch, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGit_CloneRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneRepository'
type MockGit_CloneRepository_Call struct {
	*mock.Call
}

// CloneRepository is a helper method to define mock.On call
//   - fs
//   - url
//   - branch
//   - path
func (_e *MockGit_Expecter) CloneRepository(fs interface{}, url interface{}, branch interface{}, path interface{}) *MockGit_CloneRepository_Call {
	return &MockGit_CloneRepository_Call{Call: _e.mock.On("CloneRepository", fs, url, branch, path)}
}

func (_c *MockGit_CloneRepository_Call) Run(run func(fs *cs.FileSystem, url string, branch string, path string)) *MockGit_CloneRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cs.FileSystem), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGit_CloneRepository_Call) Return(repository *git.Repository, err error) *MockGit_CloneRepository_Call {
	_c.Call.Return(repository, err)
	return _c
}

func (_c *MockGit_CloneRepository_Call) RunAndReturn(run func(fs *cs.FileSystem, url string, branch string, path string) (*git.Repository, error)) *MockGit_CloneRepository_Call {
	_c.Call.Return(run)
	return _c
}
