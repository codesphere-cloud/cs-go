// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cmd_test

import (
	"github.com/codesphere-cloud/cs-go/api"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// ListTeams provides a mock function for the type MockClient
func (_mock *MockClient) ListTeams() ([]api.Team, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListTeams")
	}

	var r0 []api.Team
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]api.Team, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []api.Team); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeams'
type MockClient_ListTeams_Call struct {
	*mock.Call
}

// ListTeams is a helper method to define mock.On call
func (_e *MockClient_Expecter) ListTeams() *MockClient_ListTeams_Call {
	return &MockClient_ListTeams_Call{Call: _e.mock.On("ListTeams")}
}

func (_c *MockClient_ListTeams_Call) Run(run func()) *MockClient_ListTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_ListTeams_Call) Return(vs []api.Team, err error) *MockClient_ListTeams_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockClient_ListTeams_Call) RunAndReturn(run func() ([]api.Team, error)) *MockClient_ListTeams_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkspaces provides a mock function for the type MockClient
func (_mock *MockClient) ListWorkspaces(teamId int) ([]api.Workspace, error) {
	ret := _mock.Called(teamId)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspaces")
	}

	var r0 []api.Workspace
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) ([]api.Workspace, error)); ok {
		return returnFunc(teamId)
	}
	if returnFunc, ok := ret.Get(0).(func(int) []api.Workspace); ok {
		r0 = returnFunc(teamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Workspace)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(teamId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkspaces'
type MockClient_ListWorkspaces_Call struct {
	*mock.Call
}

// ListWorkspaces is a helper method to define mock.On call
//   - teamId
func (_e *MockClient_Expecter) ListWorkspaces(teamId interface{}) *MockClient_ListWorkspaces_Call {
	return &MockClient_ListWorkspaces_Call{Call: _e.mock.On("ListWorkspaces", teamId)}
}

func (_c *MockClient_ListWorkspaces_Call) Run(run func(teamId int)) *MockClient_ListWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockClient_ListWorkspaces_Call) Return(vs []api.Workspace, err error) *MockClient_ListWorkspaces_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockClient_ListWorkspaces_Call) RunAndReturn(run func(teamId int) ([]api.Workspace, error)) *MockClient_ListWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// SetEnvVarOnWorkspace provides a mock function for the type MockClient
func (_mock *MockClient) SetEnvVarOnWorkspace(workspaceId int, vars map[string]string) error {
	ret := _mock.Called(workspaceId, vars)

	if len(ret) == 0 {
		panic("no return value specified for SetEnvVarOnWorkspace")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, map[string]string) error); ok {
		r0 = returnFunc(workspaceId, vars)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_SetEnvVarOnWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEnvVarOnWorkspace'
type MockClient_SetEnvVarOnWorkspace_Call struct {
	*mock.Call
}

// SetEnvVarOnWorkspace is a helper method to define mock.On call
//   - workspaceId
//   - vars
func (_e *MockClient_Expecter) SetEnvVarOnWorkspace(workspaceId interface{}, vars interface{}) *MockClient_SetEnvVarOnWorkspace_Call {
	return &MockClient_SetEnvVarOnWorkspace_Call{Call: _e.mock.On("SetEnvVarOnWorkspace", workspaceId, vars)}
}

func (_c *MockClient_SetEnvVarOnWorkspace_Call) Run(run func(workspaceId int, vars map[string]string)) *MockClient_SetEnvVarOnWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(map[string]string))
	})
	return _c
}

func (_c *MockClient_SetEnvVarOnWorkspace_Call) Return(err error) *MockClient_SetEnvVarOnWorkspace_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_SetEnvVarOnWorkspace_Call) RunAndReturn(run func(workspaceId int, vars map[string]string) error) *MockClient_SetEnvVarOnWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// StartPipelines provides a mock function for the type MockClient
func (_mock *MockClient) StartPipelines(workspaceId int, pipelineStage string) error {
	ret := _mock.Called(workspaceId, pipelineStage)

	if len(ret) == 0 {
		panic("no return value specified for StartPipelines")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = returnFunc(workspaceId, pipelineStage)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_StartPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartPipelines'
type MockClient_StartPipelines_Call struct {
	*mock.Call
}

// StartPipelines is a helper method to define mock.On call
//   - workspaceId
//   - pipelineStage
func (_e *MockClient_Expecter) StartPipelines(workspaceId interface{}, pipelineStage interface{}) *MockClient_StartPipelines_Call {
	return &MockClient_StartPipelines_Call{Call: _e.mock.On("StartPipelines", workspaceId, pipelineStage)}
}

func (_c *MockClient_StartPipelines_Call) Run(run func(workspaceId int, pipelineStage string)) *MockClient_StartPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockClient_StartPipelines_Call) Return(err error) *MockClient_StartPipelines_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_StartPipelines_Call) RunAndReturn(run func(workspaceId int, pipelineStage string) error) *MockClient_StartPipelines_Call {
	_c.Call.Return(run)
	return _c
}
