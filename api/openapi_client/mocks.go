// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package openapi_client

import (
	"context"
	mock "github.com/stretchr/testify/mock"
	"net/http"
)

// NewMockDomainsAPI creates a new instance of MockDomainsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainsAPI {
	mock := &MockDomainsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainsAPI is an autogenerated mock type for the DomainsAPI type
type MockDomainsAPI struct {
	mock.Mock
}

type MockDomainsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainsAPI) EXPECT() *MockDomainsAPI_Expecter {
	return &MockDomainsAPI_Expecter{mock: &_m.Mock}
}

// DomainsCreateDomain provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsCreateDomain(ctx context.Context, teamId float32, domainName string) ApiDomainsCreateDomainRequest {
	ret := _mock.Called(ctx, teamId, domainName)

	if len(ret) == 0 {
		panic("no return value specified for DomainsCreateDomain")
	}

	var r0 ApiDomainsCreateDomainRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string) ApiDomainsCreateDomainRequest); ok {
		r0 = returnFunc(ctx, teamId, domainName)
	} else {
		r0 = ret.Get(0).(ApiDomainsCreateDomainRequest)
	}
	return r0
}

// MockDomainsAPI_DomainsCreateDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsCreateDomain'
type MockDomainsAPI_DomainsCreateDomain_Call struct {
	*mock.Call
}

// DomainsCreateDomain is a helper method to define mock.On call
//   - ctx
//   - teamId
//   - domainName
func (_e *MockDomainsAPI_Expecter) DomainsCreateDomain(ctx interface{}, teamId interface{}, domainName interface{}) *MockDomainsAPI_DomainsCreateDomain_Call {
	return &MockDomainsAPI_DomainsCreateDomain_Call{Call: _e.mock.On("DomainsCreateDomain", ctx, teamId, domainName)}
}

func (_c *MockDomainsAPI_DomainsCreateDomain_Call) Run(run func(ctx context.Context, teamId float32, domainName string)) *MockDomainsAPI_DomainsCreateDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsCreateDomain_Call) Return(apiDomainsCreateDomainRequest ApiDomainsCreateDomainRequest) *MockDomainsAPI_DomainsCreateDomain_Call {
	_c.Call.Return(apiDomainsCreateDomainRequest)
	return _c
}

func (_c *MockDomainsAPI_DomainsCreateDomain_Call) RunAndReturn(run func(ctx context.Context, teamId float32, domainName string) ApiDomainsCreateDomainRequest) *MockDomainsAPI_DomainsCreateDomain_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsCreateDomainExecute provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsCreateDomainExecute(r ApiDomainsCreateDomainRequest) (*DomainsGetDomain200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DomainsCreateDomainExecute")
	}

	var r0 *DomainsGetDomain200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsCreateDomainRequest) (*DomainsGetDomain200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsCreateDomainRequest) *DomainsGetDomain200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DomainsGetDomain200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiDomainsCreateDomainRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiDomainsCreateDomainRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDomainsAPI_DomainsCreateDomainExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsCreateDomainExecute'
type MockDomainsAPI_DomainsCreateDomainExecute_Call struct {
	*mock.Call
}

// DomainsCreateDomainExecute is a helper method to define mock.On call
//   - r
func (_e *MockDomainsAPI_Expecter) DomainsCreateDomainExecute(r interface{}) *MockDomainsAPI_DomainsCreateDomainExecute_Call {
	return &MockDomainsAPI_DomainsCreateDomainExecute_Call{Call: _e.mock.On("DomainsCreateDomainExecute", r)}
}

func (_c *MockDomainsAPI_DomainsCreateDomainExecute_Call) Run(run func(r ApiDomainsCreateDomainRequest)) *MockDomainsAPI_DomainsCreateDomainExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDomainsCreateDomainRequest))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsCreateDomainExecute_Call) Return(domainsGetDomain200Response *DomainsGetDomain200Response, response *http.Response, err error) *MockDomainsAPI_DomainsCreateDomainExecute_Call {
	_c.Call.Return(domainsGetDomain200Response, response, err)
	return _c
}

func (_c *MockDomainsAPI_DomainsCreateDomainExecute_Call) RunAndReturn(run func(r ApiDomainsCreateDomainRequest) (*DomainsGetDomain200Response, *http.Response, error)) *MockDomainsAPI_DomainsCreateDomainExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsDeleteDomain provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsDeleteDomain(ctx context.Context, teamId float32, domainName string) ApiDomainsDeleteDomainRequest {
	ret := _mock.Called(ctx, teamId, domainName)

	if len(ret) == 0 {
		panic("no return value specified for DomainsDeleteDomain")
	}

	var r0 ApiDomainsDeleteDomainRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string) ApiDomainsDeleteDomainRequest); ok {
		r0 = returnFunc(ctx, teamId, domainName)
	} else {
		r0 = ret.Get(0).(ApiDomainsDeleteDomainRequest)
	}
	return r0
}

// MockDomainsAPI_DomainsDeleteDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsDeleteDomain'
type MockDomainsAPI_DomainsDeleteDomain_Call struct {
	*mock.Call
}

// DomainsDeleteDomain is a helper method to define mock.On call
//   - ctx
//   - teamId
//   - domainName
func (_e *MockDomainsAPI_Expecter) DomainsDeleteDomain(ctx interface{}, teamId interface{}, domainName interface{}) *MockDomainsAPI_DomainsDeleteDomain_Call {
	return &MockDomainsAPI_DomainsDeleteDomain_Call{Call: _e.mock.On("DomainsDeleteDomain", ctx, teamId, domainName)}
}

func (_c *MockDomainsAPI_DomainsDeleteDomain_Call) Run(run func(ctx context.Context, teamId float32, domainName string)) *MockDomainsAPI_DomainsDeleteDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsDeleteDomain_Call) Return(apiDomainsDeleteDomainRequest ApiDomainsDeleteDomainRequest) *MockDomainsAPI_DomainsDeleteDomain_Call {
	_c.Call.Return(apiDomainsDeleteDomainRequest)
	return _c
}

func (_c *MockDomainsAPI_DomainsDeleteDomain_Call) RunAndReturn(run func(ctx context.Context, teamId float32, domainName string) ApiDomainsDeleteDomainRequest) *MockDomainsAPI_DomainsDeleteDomain_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsDeleteDomainExecute provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsDeleteDomainExecute(r ApiDomainsDeleteDomainRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DomainsDeleteDomainExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsDeleteDomainRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsDeleteDomainRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiDomainsDeleteDomainRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainsAPI_DomainsDeleteDomainExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsDeleteDomainExecute'
type MockDomainsAPI_DomainsDeleteDomainExecute_Call struct {
	*mock.Call
}

// DomainsDeleteDomainExecute is a helper method to define mock.On call
//   - r
func (_e *MockDomainsAPI_Expecter) DomainsDeleteDomainExecute(r interface{}) *MockDomainsAPI_DomainsDeleteDomainExecute_Call {
	return &MockDomainsAPI_DomainsDeleteDomainExecute_Call{Call: _e.mock.On("DomainsDeleteDomainExecute", r)}
}

func (_c *MockDomainsAPI_DomainsDeleteDomainExecute_Call) Run(run func(r ApiDomainsDeleteDomainRequest)) *MockDomainsAPI_DomainsDeleteDomainExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDomainsDeleteDomainRequest))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsDeleteDomainExecute_Call) Return(response *http.Response, err error) *MockDomainsAPI_DomainsDeleteDomainExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockDomainsAPI_DomainsDeleteDomainExecute_Call) RunAndReturn(run func(r ApiDomainsDeleteDomainRequest) (*http.Response, error)) *MockDomainsAPI_DomainsDeleteDomainExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsGetDomain provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsGetDomain(ctx context.Context, teamId float32, domainName string) ApiDomainsGetDomainRequest {
	ret := _mock.Called(ctx, teamId, domainName)

	if len(ret) == 0 {
		panic("no return value specified for DomainsGetDomain")
	}

	var r0 ApiDomainsGetDomainRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string) ApiDomainsGetDomainRequest); ok {
		r0 = returnFunc(ctx, teamId, domainName)
	} else {
		r0 = ret.Get(0).(ApiDomainsGetDomainRequest)
	}
	return r0
}

// MockDomainsAPI_DomainsGetDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsGetDomain'
type MockDomainsAPI_DomainsGetDomain_Call struct {
	*mock.Call
}

// DomainsGetDomain is a helper method to define mock.On call
//   - ctx
//   - teamId
//   - domainName
func (_e *MockDomainsAPI_Expecter) DomainsGetDomain(ctx interface{}, teamId interface{}, domainName interface{}) *MockDomainsAPI_DomainsGetDomain_Call {
	return &MockDomainsAPI_DomainsGetDomain_Call{Call: _e.mock.On("DomainsGetDomain", ctx, teamId, domainName)}
}

func (_c *MockDomainsAPI_DomainsGetDomain_Call) Run(run func(ctx context.Context, teamId float32, domainName string)) *MockDomainsAPI_DomainsGetDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsGetDomain_Call) Return(apiDomainsGetDomainRequest ApiDomainsGetDomainRequest) *MockDomainsAPI_DomainsGetDomain_Call {
	_c.Call.Return(apiDomainsGetDomainRequest)
	return _c
}

func (_c *MockDomainsAPI_DomainsGetDomain_Call) RunAndReturn(run func(ctx context.Context, teamId float32, domainName string) ApiDomainsGetDomainRequest) *MockDomainsAPI_DomainsGetDomain_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsGetDomainExecute provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsGetDomainExecute(r ApiDomainsGetDomainRequest) (*DomainsGetDomain200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DomainsGetDomainExecute")
	}

	var r0 *DomainsGetDomain200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsGetDomainRequest) (*DomainsGetDomain200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsGetDomainRequest) *DomainsGetDomain200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DomainsGetDomain200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiDomainsGetDomainRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiDomainsGetDomainRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDomainsAPI_DomainsGetDomainExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsGetDomainExecute'
type MockDomainsAPI_DomainsGetDomainExecute_Call struct {
	*mock.Call
}

// DomainsGetDomainExecute is a helper method to define mock.On call
//   - r
func (_e *MockDomainsAPI_Expecter) DomainsGetDomainExecute(r interface{}) *MockDomainsAPI_DomainsGetDomainExecute_Call {
	return &MockDomainsAPI_DomainsGetDomainExecute_Call{Call: _e.mock.On("DomainsGetDomainExecute", r)}
}

func (_c *MockDomainsAPI_DomainsGetDomainExecute_Call) Run(run func(r ApiDomainsGetDomainRequest)) *MockDomainsAPI_DomainsGetDomainExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDomainsGetDomainRequest))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsGetDomainExecute_Call) Return(domainsGetDomain200Response *DomainsGetDomain200Response, response *http.Response, err error) *MockDomainsAPI_DomainsGetDomainExecute_Call {
	_c.Call.Return(domainsGetDomain200Response, response, err)
	return _c
}

func (_c *MockDomainsAPI_DomainsGetDomainExecute_Call) RunAndReturn(run func(r ApiDomainsGetDomainRequest) (*DomainsGetDomain200Response, *http.Response, error)) *MockDomainsAPI_DomainsGetDomainExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsListDomains provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsListDomains(ctx context.Context, teamId float32) ApiDomainsListDomainsRequest {
	ret := _mock.Called(ctx, teamId)

	if len(ret) == 0 {
		panic("no return value specified for DomainsListDomains")
	}

	var r0 ApiDomainsListDomainsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiDomainsListDomainsRequest); ok {
		r0 = returnFunc(ctx, teamId)
	} else {
		r0 = ret.Get(0).(ApiDomainsListDomainsRequest)
	}
	return r0
}

// MockDomainsAPI_DomainsListDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsListDomains'
type MockDomainsAPI_DomainsListDomains_Call struct {
	*mock.Call
}

// DomainsListDomains is a helper method to define mock.On call
//   - ctx
//   - teamId
func (_e *MockDomainsAPI_Expecter) DomainsListDomains(ctx interface{}, teamId interface{}) *MockDomainsAPI_DomainsListDomains_Call {
	return &MockDomainsAPI_DomainsListDomains_Call{Call: _e.mock.On("DomainsListDomains", ctx, teamId)}
}

func (_c *MockDomainsAPI_DomainsListDomains_Call) Run(run func(ctx context.Context, teamId float32)) *MockDomainsAPI_DomainsListDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsListDomains_Call) Return(apiDomainsListDomainsRequest ApiDomainsListDomainsRequest) *MockDomainsAPI_DomainsListDomains_Call {
	_c.Call.Return(apiDomainsListDomainsRequest)
	return _c
}

func (_c *MockDomainsAPI_DomainsListDomains_Call) RunAndReturn(run func(ctx context.Context, teamId float32) ApiDomainsListDomainsRequest) *MockDomainsAPI_DomainsListDomains_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsListDomainsExecute provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsListDomainsExecute(r ApiDomainsListDomainsRequest) ([]DomainsGetDomain200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DomainsListDomainsExecute")
	}

	var r0 []DomainsGetDomain200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsListDomainsRequest) ([]DomainsGetDomain200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsListDomainsRequest) []DomainsGetDomain200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DomainsGetDomain200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiDomainsListDomainsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiDomainsListDomainsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDomainsAPI_DomainsListDomainsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsListDomainsExecute'
type MockDomainsAPI_DomainsListDomainsExecute_Call struct {
	*mock.Call
}

// DomainsListDomainsExecute is a helper method to define mock.On call
//   - r
func (_e *MockDomainsAPI_Expecter) DomainsListDomainsExecute(r interface{}) *MockDomainsAPI_DomainsListDomainsExecute_Call {
	return &MockDomainsAPI_DomainsListDomainsExecute_Call{Call: _e.mock.On("DomainsListDomainsExecute", r)}
}

func (_c *MockDomainsAPI_DomainsListDomainsExecute_Call) Run(run func(r ApiDomainsListDomainsRequest)) *MockDomainsAPI_DomainsListDomainsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDomainsListDomainsRequest))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsListDomainsExecute_Call) Return(domainsGetDomain200Responses []DomainsGetDomain200Response, response *http.Response, err error) *MockDomainsAPI_DomainsListDomainsExecute_Call {
	_c.Call.Return(domainsGetDomain200Responses, response, err)
	return _c
}

func (_c *MockDomainsAPI_DomainsListDomainsExecute_Call) RunAndReturn(run func(r ApiDomainsListDomainsRequest) ([]DomainsGetDomain200Response, *http.Response, error)) *MockDomainsAPI_DomainsListDomainsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsUpdateDomain provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsUpdateDomain(ctx context.Context, teamId float32, domainName string) ApiDomainsUpdateDomainRequest {
	ret := _mock.Called(ctx, teamId, domainName)

	if len(ret) == 0 {
		panic("no return value specified for DomainsUpdateDomain")
	}

	var r0 ApiDomainsUpdateDomainRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string) ApiDomainsUpdateDomainRequest); ok {
		r0 = returnFunc(ctx, teamId, domainName)
	} else {
		r0 = ret.Get(0).(ApiDomainsUpdateDomainRequest)
	}
	return r0
}

// MockDomainsAPI_DomainsUpdateDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsUpdateDomain'
type MockDomainsAPI_DomainsUpdateDomain_Call struct {
	*mock.Call
}

// DomainsUpdateDomain is a helper method to define mock.On call
//   - ctx
//   - teamId
//   - domainName
func (_e *MockDomainsAPI_Expecter) DomainsUpdateDomain(ctx interface{}, teamId interface{}, domainName interface{}) *MockDomainsAPI_DomainsUpdateDomain_Call {
	return &MockDomainsAPI_DomainsUpdateDomain_Call{Call: _e.mock.On("DomainsUpdateDomain", ctx, teamId, domainName)}
}

func (_c *MockDomainsAPI_DomainsUpdateDomain_Call) Run(run func(ctx context.Context, teamId float32, domainName string)) *MockDomainsAPI_DomainsUpdateDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsUpdateDomain_Call) Return(apiDomainsUpdateDomainRequest ApiDomainsUpdateDomainRequest) *MockDomainsAPI_DomainsUpdateDomain_Call {
	_c.Call.Return(apiDomainsUpdateDomainRequest)
	return _c
}

func (_c *MockDomainsAPI_DomainsUpdateDomain_Call) RunAndReturn(run func(ctx context.Context, teamId float32, domainName string) ApiDomainsUpdateDomainRequest) *MockDomainsAPI_DomainsUpdateDomain_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsUpdateDomainExecute provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsUpdateDomainExecute(r ApiDomainsUpdateDomainRequest) (*DomainsGetDomain200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DomainsUpdateDomainExecute")
	}

	var r0 *DomainsGetDomain200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsUpdateDomainRequest) (*DomainsGetDomain200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsUpdateDomainRequest) *DomainsGetDomain200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DomainsGetDomain200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiDomainsUpdateDomainRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiDomainsUpdateDomainRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDomainsAPI_DomainsUpdateDomainExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsUpdateDomainExecute'
type MockDomainsAPI_DomainsUpdateDomainExecute_Call struct {
	*mock.Call
}

// DomainsUpdateDomainExecute is a helper method to define mock.On call
//   - r
func (_e *MockDomainsAPI_Expecter) DomainsUpdateDomainExecute(r interface{}) *MockDomainsAPI_DomainsUpdateDomainExecute_Call {
	return &MockDomainsAPI_DomainsUpdateDomainExecute_Call{Call: _e.mock.On("DomainsUpdateDomainExecute", r)}
}

func (_c *MockDomainsAPI_DomainsUpdateDomainExecute_Call) Run(run func(r ApiDomainsUpdateDomainRequest)) *MockDomainsAPI_DomainsUpdateDomainExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDomainsUpdateDomainRequest))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsUpdateDomainExecute_Call) Return(domainsGetDomain200Response *DomainsGetDomain200Response, response *http.Response, err error) *MockDomainsAPI_DomainsUpdateDomainExecute_Call {
	_c.Call.Return(domainsGetDomain200Response, response, err)
	return _c
}

func (_c *MockDomainsAPI_DomainsUpdateDomainExecute_Call) RunAndReturn(run func(r ApiDomainsUpdateDomainRequest) (*DomainsGetDomain200Response, *http.Response, error)) *MockDomainsAPI_DomainsUpdateDomainExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsUpdateWorkspaceConnections provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsUpdateWorkspaceConnections(ctx context.Context, teamId float32, domainName string) ApiDomainsUpdateWorkspaceConnectionsRequest {
	ret := _mock.Called(ctx, teamId, domainName)

	if len(ret) == 0 {
		panic("no return value specified for DomainsUpdateWorkspaceConnections")
	}

	var r0 ApiDomainsUpdateWorkspaceConnectionsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string) ApiDomainsUpdateWorkspaceConnectionsRequest); ok {
		r0 = returnFunc(ctx, teamId, domainName)
	} else {
		r0 = ret.Get(0).(ApiDomainsUpdateWorkspaceConnectionsRequest)
	}
	return r0
}

// MockDomainsAPI_DomainsUpdateWorkspaceConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsUpdateWorkspaceConnections'
type MockDomainsAPI_DomainsUpdateWorkspaceConnections_Call struct {
	*mock.Call
}

// DomainsUpdateWorkspaceConnections is a helper method to define mock.On call
//   - ctx
//   - teamId
//   - domainName
func (_e *MockDomainsAPI_Expecter) DomainsUpdateWorkspaceConnections(ctx interface{}, teamId interface{}, domainName interface{}) *MockDomainsAPI_DomainsUpdateWorkspaceConnections_Call {
	return &MockDomainsAPI_DomainsUpdateWorkspaceConnections_Call{Call: _e.mock.On("DomainsUpdateWorkspaceConnections", ctx, teamId, domainName)}
}

func (_c *MockDomainsAPI_DomainsUpdateWorkspaceConnections_Call) Run(run func(ctx context.Context, teamId float32, domainName string)) *MockDomainsAPI_DomainsUpdateWorkspaceConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsUpdateWorkspaceConnections_Call) Return(apiDomainsUpdateWorkspaceConnectionsRequest ApiDomainsUpdateWorkspaceConnectionsRequest) *MockDomainsAPI_DomainsUpdateWorkspaceConnections_Call {
	_c.Call.Return(apiDomainsUpdateWorkspaceConnectionsRequest)
	return _c
}

func (_c *MockDomainsAPI_DomainsUpdateWorkspaceConnections_Call) RunAndReturn(run func(ctx context.Context, teamId float32, domainName string) ApiDomainsUpdateWorkspaceConnectionsRequest) *MockDomainsAPI_DomainsUpdateWorkspaceConnections_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsUpdateWorkspaceConnectionsExecute provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsUpdateWorkspaceConnectionsExecute(r ApiDomainsUpdateWorkspaceConnectionsRequest) (*DomainsGetDomain200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DomainsUpdateWorkspaceConnectionsExecute")
	}

	var r0 *DomainsGetDomain200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsUpdateWorkspaceConnectionsRequest) (*DomainsGetDomain200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsUpdateWorkspaceConnectionsRequest) *DomainsGetDomain200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DomainsGetDomain200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiDomainsUpdateWorkspaceConnectionsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiDomainsUpdateWorkspaceConnectionsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDomainsAPI_DomainsUpdateWorkspaceConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsUpdateWorkspaceConnectionsExecute'
type MockDomainsAPI_DomainsUpdateWorkspaceConnectionsExecute_Call struct {
	*mock.Call
}

// DomainsUpdateWorkspaceConnectionsExecute is a helper method to define mock.On call
//   - r
func (_e *MockDomainsAPI_Expecter) DomainsUpdateWorkspaceConnectionsExecute(r interface{}) *MockDomainsAPI_DomainsUpdateWorkspaceConnectionsExecute_Call {
	return &MockDomainsAPI_DomainsUpdateWorkspaceConnectionsExecute_Call{Call: _e.mock.On("DomainsUpdateWorkspaceConnectionsExecute", r)}
}

func (_c *MockDomainsAPI_DomainsUpdateWorkspaceConnectionsExecute_Call) Run(run func(r ApiDomainsUpdateWorkspaceConnectionsRequest)) *MockDomainsAPI_DomainsUpdateWorkspaceConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDomainsUpdateWorkspaceConnectionsRequest))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsUpdateWorkspaceConnectionsExecute_Call) Return(domainsGetDomain200Response *DomainsGetDomain200Response, response *http.Response, err error) *MockDomainsAPI_DomainsUpdateWorkspaceConnectionsExecute_Call {
	_c.Call.Return(domainsGetDomain200Response, response, err)
	return _c
}

func (_c *MockDomainsAPI_DomainsUpdateWorkspaceConnectionsExecute_Call) RunAndReturn(run func(r ApiDomainsUpdateWorkspaceConnectionsRequest) (*DomainsGetDomain200Response, *http.Response, error)) *MockDomainsAPI_DomainsUpdateWorkspaceConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsVerifyDomain provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsVerifyDomain(ctx context.Context, teamId float32, domainName string) ApiDomainsVerifyDomainRequest {
	ret := _mock.Called(ctx, teamId, domainName)

	if len(ret) == 0 {
		panic("no return value specified for DomainsVerifyDomain")
	}

	var r0 ApiDomainsVerifyDomainRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string) ApiDomainsVerifyDomainRequest); ok {
		r0 = returnFunc(ctx, teamId, domainName)
	} else {
		r0 = ret.Get(0).(ApiDomainsVerifyDomainRequest)
	}
	return r0
}

// MockDomainsAPI_DomainsVerifyDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsVerifyDomain'
type MockDomainsAPI_DomainsVerifyDomain_Call struct {
	*mock.Call
}

// DomainsVerifyDomain is a helper method to define mock.On call
//   - ctx
//   - teamId
//   - domainName
func (_e *MockDomainsAPI_Expecter) DomainsVerifyDomain(ctx interface{}, teamId interface{}, domainName interface{}) *MockDomainsAPI_DomainsVerifyDomain_Call {
	return &MockDomainsAPI_DomainsVerifyDomain_Call{Call: _e.mock.On("DomainsVerifyDomain", ctx, teamId, domainName)}
}

func (_c *MockDomainsAPI_DomainsVerifyDomain_Call) Run(run func(ctx context.Context, teamId float32, domainName string)) *MockDomainsAPI_DomainsVerifyDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsVerifyDomain_Call) Return(apiDomainsVerifyDomainRequest ApiDomainsVerifyDomainRequest) *MockDomainsAPI_DomainsVerifyDomain_Call {
	_c.Call.Return(apiDomainsVerifyDomainRequest)
	return _c
}

func (_c *MockDomainsAPI_DomainsVerifyDomain_Call) RunAndReturn(run func(ctx context.Context, teamId float32, domainName string) ApiDomainsVerifyDomainRequest) *MockDomainsAPI_DomainsVerifyDomain_Call {
	_c.Call.Return(run)
	return _c
}

// DomainsVerifyDomainExecute provides a mock function for the type MockDomainsAPI
func (_mock *MockDomainsAPI) DomainsVerifyDomainExecute(r ApiDomainsVerifyDomainRequest) (*DomainsGetDomain200ResponseDomainVerificationStatus, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DomainsVerifyDomainExecute")
	}

	var r0 *DomainsGetDomain200ResponseDomainVerificationStatus
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsVerifyDomainRequest) (*DomainsGetDomain200ResponseDomainVerificationStatus, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiDomainsVerifyDomainRequest) *DomainsGetDomain200ResponseDomainVerificationStatus); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DomainsGetDomain200ResponseDomainVerificationStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiDomainsVerifyDomainRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiDomainsVerifyDomainRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDomainsAPI_DomainsVerifyDomainExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainsVerifyDomainExecute'
type MockDomainsAPI_DomainsVerifyDomainExecute_Call struct {
	*mock.Call
}

// DomainsVerifyDomainExecute is a helper method to define mock.On call
//   - r
func (_e *MockDomainsAPI_Expecter) DomainsVerifyDomainExecute(r interface{}) *MockDomainsAPI_DomainsVerifyDomainExecute_Call {
	return &MockDomainsAPI_DomainsVerifyDomainExecute_Call{Call: _e.mock.On("DomainsVerifyDomainExecute", r)}
}

func (_c *MockDomainsAPI_DomainsVerifyDomainExecute_Call) Run(run func(r ApiDomainsVerifyDomainRequest)) *MockDomainsAPI_DomainsVerifyDomainExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDomainsVerifyDomainRequest))
	})
	return _c
}

func (_c *MockDomainsAPI_DomainsVerifyDomainExecute_Call) Return(domainsGetDomain200ResponseDomainVerificationStatus *DomainsGetDomain200ResponseDomainVerificationStatus, response *http.Response, err error) *MockDomainsAPI_DomainsVerifyDomainExecute_Call {
	_c.Call.Return(domainsGetDomain200ResponseDomainVerificationStatus, response, err)
	return _c
}

func (_c *MockDomainsAPI_DomainsVerifyDomainExecute_Call) RunAndReturn(run func(r ApiDomainsVerifyDomainRequest) (*DomainsGetDomain200ResponseDomainVerificationStatus, *http.Response, error)) *MockDomainsAPI_DomainsVerifyDomainExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetadataAPI creates a new instance of MockMetadataAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetadataAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetadataAPI {
	mock := &MockMetadataAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetadataAPI is an autogenerated mock type for the MetadataAPI type
type MockMetadataAPI struct {
	mock.Mock
}

type MockMetadataAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetadataAPI) EXPECT() *MockMetadataAPI_Expecter {
	return &MockMetadataAPI_Expecter{mock: &_m.Mock}
}

// MetadataGetDatacenters provides a mock function for the type MockMetadataAPI
func (_mock *MockMetadataAPI) MetadataGetDatacenters(ctx context.Context) ApiMetadataGetDatacentersRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MetadataGetDatacenters")
	}

	var r0 ApiMetadataGetDatacentersRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) ApiMetadataGetDatacentersRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(ApiMetadataGetDatacentersRequest)
	}
	return r0
}

// MockMetadataAPI_MetadataGetDatacenters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetadataGetDatacenters'
type MockMetadataAPI_MetadataGetDatacenters_Call struct {
	*mock.Call
}

// MetadataGetDatacenters is a helper method to define mock.On call
//   - ctx
func (_e *MockMetadataAPI_Expecter) MetadataGetDatacenters(ctx interface{}) *MockMetadataAPI_MetadataGetDatacenters_Call {
	return &MockMetadataAPI_MetadataGetDatacenters_Call{Call: _e.mock.On("MetadataGetDatacenters", ctx)}
}

func (_c *MockMetadataAPI_MetadataGetDatacenters_Call) Run(run func(ctx context.Context)) *MockMetadataAPI_MetadataGetDatacenters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMetadataAPI_MetadataGetDatacenters_Call) Return(apiMetadataGetDatacentersRequest ApiMetadataGetDatacentersRequest) *MockMetadataAPI_MetadataGetDatacenters_Call {
	_c.Call.Return(apiMetadataGetDatacentersRequest)
	return _c
}

func (_c *MockMetadataAPI_MetadataGetDatacenters_Call) RunAndReturn(run func(ctx context.Context) ApiMetadataGetDatacentersRequest) *MockMetadataAPI_MetadataGetDatacenters_Call {
	_c.Call.Return(run)
	return _c
}

// MetadataGetDatacentersExecute provides a mock function for the type MockMetadataAPI
func (_mock *MockMetadataAPI) MetadataGetDatacentersExecute(r ApiMetadataGetDatacentersRequest) ([]MetadataGetDatacenters200ResponseInner, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for MetadataGetDatacentersExecute")
	}

	var r0 []MetadataGetDatacenters200ResponseInner
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiMetadataGetDatacentersRequest) ([]MetadataGetDatacenters200ResponseInner, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiMetadataGetDatacentersRequest) []MetadataGetDatacenters200ResponseInner); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]MetadataGetDatacenters200ResponseInner)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiMetadataGetDatacentersRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiMetadataGetDatacentersRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMetadataAPI_MetadataGetDatacentersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetadataGetDatacentersExecute'
type MockMetadataAPI_MetadataGetDatacentersExecute_Call struct {
	*mock.Call
}

// MetadataGetDatacentersExecute is a helper method to define mock.On call
//   - r
func (_e *MockMetadataAPI_Expecter) MetadataGetDatacentersExecute(r interface{}) *MockMetadataAPI_MetadataGetDatacentersExecute_Call {
	return &MockMetadataAPI_MetadataGetDatacentersExecute_Call{Call: _e.mock.On("MetadataGetDatacentersExecute", r)}
}

func (_c *MockMetadataAPI_MetadataGetDatacentersExecute_Call) Run(run func(r ApiMetadataGetDatacentersRequest)) *MockMetadataAPI_MetadataGetDatacentersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiMetadataGetDatacentersRequest))
	})
	return _c
}

func (_c *MockMetadataAPI_MetadataGetDatacentersExecute_Call) Return(metadataGetDatacenters200ResponseInners []MetadataGetDatacenters200ResponseInner, response *http.Response, err error) *MockMetadataAPI_MetadataGetDatacentersExecute_Call {
	_c.Call.Return(metadataGetDatacenters200ResponseInners, response, err)
	return _c
}

func (_c *MockMetadataAPI_MetadataGetDatacentersExecute_Call) RunAndReturn(run func(r ApiMetadataGetDatacentersRequest) ([]MetadataGetDatacenters200ResponseInner, *http.Response, error)) *MockMetadataAPI_MetadataGetDatacentersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// MetadataGetWorkspacePlans provides a mock function for the type MockMetadataAPI
func (_mock *MockMetadataAPI) MetadataGetWorkspacePlans(ctx context.Context) ApiMetadataGetWorkspacePlansRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MetadataGetWorkspacePlans")
	}

	var r0 ApiMetadataGetWorkspacePlansRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) ApiMetadataGetWorkspacePlansRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(ApiMetadataGetWorkspacePlansRequest)
	}
	return r0
}

// MockMetadataAPI_MetadataGetWorkspacePlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetadataGetWorkspacePlans'
type MockMetadataAPI_MetadataGetWorkspacePlans_Call struct {
	*mock.Call
}

// MetadataGetWorkspacePlans is a helper method to define mock.On call
//   - ctx
func (_e *MockMetadataAPI_Expecter) MetadataGetWorkspacePlans(ctx interface{}) *MockMetadataAPI_MetadataGetWorkspacePlans_Call {
	return &MockMetadataAPI_MetadataGetWorkspacePlans_Call{Call: _e.mock.On("MetadataGetWorkspacePlans", ctx)}
}

func (_c *MockMetadataAPI_MetadataGetWorkspacePlans_Call) Run(run func(ctx context.Context)) *MockMetadataAPI_MetadataGetWorkspacePlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMetadataAPI_MetadataGetWorkspacePlans_Call) Return(apiMetadataGetWorkspacePlansRequest ApiMetadataGetWorkspacePlansRequest) *MockMetadataAPI_MetadataGetWorkspacePlans_Call {
	_c.Call.Return(apiMetadataGetWorkspacePlansRequest)
	return _c
}

func (_c *MockMetadataAPI_MetadataGetWorkspacePlans_Call) RunAndReturn(run func(ctx context.Context) ApiMetadataGetWorkspacePlansRequest) *MockMetadataAPI_MetadataGetWorkspacePlans_Call {
	_c.Call.Return(run)
	return _c
}

// MetadataGetWorkspacePlansExecute provides a mock function for the type MockMetadataAPI
func (_mock *MockMetadataAPI) MetadataGetWorkspacePlansExecute(r ApiMetadataGetWorkspacePlansRequest) ([]MetadataGetWorkspacePlans200ResponseInner, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for MetadataGetWorkspacePlansExecute")
	}

	var r0 []MetadataGetWorkspacePlans200ResponseInner
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiMetadataGetWorkspacePlansRequest) ([]MetadataGetWorkspacePlans200ResponseInner, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiMetadataGetWorkspacePlansRequest) []MetadataGetWorkspacePlans200ResponseInner); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]MetadataGetWorkspacePlans200ResponseInner)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiMetadataGetWorkspacePlansRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiMetadataGetWorkspacePlansRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMetadataAPI_MetadataGetWorkspacePlansExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetadataGetWorkspacePlansExecute'
type MockMetadataAPI_MetadataGetWorkspacePlansExecute_Call struct {
	*mock.Call
}

// MetadataGetWorkspacePlansExecute is a helper method to define mock.On call
//   - r
func (_e *MockMetadataAPI_Expecter) MetadataGetWorkspacePlansExecute(r interface{}) *MockMetadataAPI_MetadataGetWorkspacePlansExecute_Call {
	return &MockMetadataAPI_MetadataGetWorkspacePlansExecute_Call{Call: _e.mock.On("MetadataGetWorkspacePlansExecute", r)}
}

func (_c *MockMetadataAPI_MetadataGetWorkspacePlansExecute_Call) Run(run func(r ApiMetadataGetWorkspacePlansRequest)) *MockMetadataAPI_MetadataGetWorkspacePlansExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiMetadataGetWorkspacePlansRequest))
	})
	return _c
}

func (_c *MockMetadataAPI_MetadataGetWorkspacePlansExecute_Call) Return(metadataGetWorkspacePlans200ResponseInners []MetadataGetWorkspacePlans200ResponseInner, response *http.Response, err error) *MockMetadataAPI_MetadataGetWorkspacePlansExecute_Call {
	_c.Call.Return(metadataGetWorkspacePlans200ResponseInners, response, err)
	return _c
}

func (_c *MockMetadataAPI_MetadataGetWorkspacePlansExecute_Call) RunAndReturn(run func(r ApiMetadataGetWorkspacePlansRequest) ([]MetadataGetWorkspacePlans200ResponseInner, *http.Response, error)) *MockMetadataAPI_MetadataGetWorkspacePlansExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTeamsAPI creates a new instance of MockTeamsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeamsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTeamsAPI {
	mock := &MockTeamsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTeamsAPI is an autogenerated mock type for the TeamsAPI type
type MockTeamsAPI struct {
	mock.Mock
}

type MockTeamsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeamsAPI) EXPECT() *MockTeamsAPI_Expecter {
	return &MockTeamsAPI_Expecter{mock: &_m.Mock}
}

// TeamsCreateTeam provides a mock function for the type MockTeamsAPI
func (_mock *MockTeamsAPI) TeamsCreateTeam(ctx context.Context) ApiTeamsCreateTeamRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TeamsCreateTeam")
	}

	var r0 ApiTeamsCreateTeamRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) ApiTeamsCreateTeamRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(ApiTeamsCreateTeamRequest)
	}
	return r0
}

// MockTeamsAPI_TeamsCreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamsCreateTeam'
type MockTeamsAPI_TeamsCreateTeam_Call struct {
	*mock.Call
}

// TeamsCreateTeam is a helper method to define mock.On call
//   - ctx
func (_e *MockTeamsAPI_Expecter) TeamsCreateTeam(ctx interface{}) *MockTeamsAPI_TeamsCreateTeam_Call {
	return &MockTeamsAPI_TeamsCreateTeam_Call{Call: _e.mock.On("TeamsCreateTeam", ctx)}
}

func (_c *MockTeamsAPI_TeamsCreateTeam_Call) Run(run func(ctx context.Context)) *MockTeamsAPI_TeamsCreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTeamsAPI_TeamsCreateTeam_Call) Return(apiTeamsCreateTeamRequest ApiTeamsCreateTeamRequest) *MockTeamsAPI_TeamsCreateTeam_Call {
	_c.Call.Return(apiTeamsCreateTeamRequest)
	return _c
}

func (_c *MockTeamsAPI_TeamsCreateTeam_Call) RunAndReturn(run func(ctx context.Context) ApiTeamsCreateTeamRequest) *MockTeamsAPI_TeamsCreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// TeamsCreateTeamExecute provides a mock function for the type MockTeamsAPI
func (_mock *MockTeamsAPI) TeamsCreateTeamExecute(r ApiTeamsCreateTeamRequest) (*TeamsGetTeam200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TeamsCreateTeamExecute")
	}

	var r0 *TeamsGetTeam200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiTeamsCreateTeamRequest) (*TeamsGetTeam200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiTeamsCreateTeamRequest) *TeamsGetTeam200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TeamsGetTeam200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiTeamsCreateTeamRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiTeamsCreateTeamRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTeamsAPI_TeamsCreateTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamsCreateTeamExecute'
type MockTeamsAPI_TeamsCreateTeamExecute_Call struct {
	*mock.Call
}

// TeamsCreateTeamExecute is a helper method to define mock.On call
//   - r
func (_e *MockTeamsAPI_Expecter) TeamsCreateTeamExecute(r interface{}) *MockTeamsAPI_TeamsCreateTeamExecute_Call {
	return &MockTeamsAPI_TeamsCreateTeamExecute_Call{Call: _e.mock.On("TeamsCreateTeamExecute", r)}
}

func (_c *MockTeamsAPI_TeamsCreateTeamExecute_Call) Run(run func(r ApiTeamsCreateTeamRequest)) *MockTeamsAPI_TeamsCreateTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiTeamsCreateTeamRequest))
	})
	return _c
}

func (_c *MockTeamsAPI_TeamsCreateTeamExecute_Call) Return(teamsGetTeam200Response *TeamsGetTeam200Response, response *http.Response, err error) *MockTeamsAPI_TeamsCreateTeamExecute_Call {
	_c.Call.Return(teamsGetTeam200Response, response, err)
	return _c
}

func (_c *MockTeamsAPI_TeamsCreateTeamExecute_Call) RunAndReturn(run func(r ApiTeamsCreateTeamRequest) (*TeamsGetTeam200Response, *http.Response, error)) *MockTeamsAPI_TeamsCreateTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TeamsDeleteTeam provides a mock function for the type MockTeamsAPI
func (_mock *MockTeamsAPI) TeamsDeleteTeam(ctx context.Context, teamId float32) ApiTeamsDeleteTeamRequest {
	ret := _mock.Called(ctx, teamId)

	if len(ret) == 0 {
		panic("no return value specified for TeamsDeleteTeam")
	}

	var r0 ApiTeamsDeleteTeamRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiTeamsDeleteTeamRequest); ok {
		r0 = returnFunc(ctx, teamId)
	} else {
		r0 = ret.Get(0).(ApiTeamsDeleteTeamRequest)
	}
	return r0
}

// MockTeamsAPI_TeamsDeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamsDeleteTeam'
type MockTeamsAPI_TeamsDeleteTeam_Call struct {
	*mock.Call
}

// TeamsDeleteTeam is a helper method to define mock.On call
//   - ctx
//   - teamId
func (_e *MockTeamsAPI_Expecter) TeamsDeleteTeam(ctx interface{}, teamId interface{}) *MockTeamsAPI_TeamsDeleteTeam_Call {
	return &MockTeamsAPI_TeamsDeleteTeam_Call{Call: _e.mock.On("TeamsDeleteTeam", ctx, teamId)}
}

func (_c *MockTeamsAPI_TeamsDeleteTeam_Call) Run(run func(ctx context.Context, teamId float32)) *MockTeamsAPI_TeamsDeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockTeamsAPI_TeamsDeleteTeam_Call) Return(apiTeamsDeleteTeamRequest ApiTeamsDeleteTeamRequest) *MockTeamsAPI_TeamsDeleteTeam_Call {
	_c.Call.Return(apiTeamsDeleteTeamRequest)
	return _c
}

func (_c *MockTeamsAPI_TeamsDeleteTeam_Call) RunAndReturn(run func(ctx context.Context, teamId float32) ApiTeamsDeleteTeamRequest) *MockTeamsAPI_TeamsDeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// TeamsDeleteTeamExecute provides a mock function for the type MockTeamsAPI
func (_mock *MockTeamsAPI) TeamsDeleteTeamExecute(r ApiTeamsDeleteTeamRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TeamsDeleteTeamExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiTeamsDeleteTeamRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiTeamsDeleteTeamRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiTeamsDeleteTeamRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsAPI_TeamsDeleteTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamsDeleteTeamExecute'
type MockTeamsAPI_TeamsDeleteTeamExecute_Call struct {
	*mock.Call
}

// TeamsDeleteTeamExecute is a helper method to define mock.On call
//   - r
func (_e *MockTeamsAPI_Expecter) TeamsDeleteTeamExecute(r interface{}) *MockTeamsAPI_TeamsDeleteTeamExecute_Call {
	return &MockTeamsAPI_TeamsDeleteTeamExecute_Call{Call: _e.mock.On("TeamsDeleteTeamExecute", r)}
}

func (_c *MockTeamsAPI_TeamsDeleteTeamExecute_Call) Run(run func(r ApiTeamsDeleteTeamRequest)) *MockTeamsAPI_TeamsDeleteTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiTeamsDeleteTeamRequest))
	})
	return _c
}

func (_c *MockTeamsAPI_TeamsDeleteTeamExecute_Call) Return(response *http.Response, err error) *MockTeamsAPI_TeamsDeleteTeamExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTeamsAPI_TeamsDeleteTeamExecute_Call) RunAndReturn(run func(r ApiTeamsDeleteTeamRequest) (*http.Response, error)) *MockTeamsAPI_TeamsDeleteTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TeamsGetTeam provides a mock function for the type MockTeamsAPI
func (_mock *MockTeamsAPI) TeamsGetTeam(ctx context.Context, teamId float32) ApiTeamsGetTeamRequest {
	ret := _mock.Called(ctx, teamId)

	if len(ret) == 0 {
		panic("no return value specified for TeamsGetTeam")
	}

	var r0 ApiTeamsGetTeamRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiTeamsGetTeamRequest); ok {
		r0 = returnFunc(ctx, teamId)
	} else {
		r0 = ret.Get(0).(ApiTeamsGetTeamRequest)
	}
	return r0
}

// MockTeamsAPI_TeamsGetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamsGetTeam'
type MockTeamsAPI_TeamsGetTeam_Call struct {
	*mock.Call
}

// TeamsGetTeam is a helper method to define mock.On call
//   - ctx
//   - teamId
func (_e *MockTeamsAPI_Expecter) TeamsGetTeam(ctx interface{}, teamId interface{}) *MockTeamsAPI_TeamsGetTeam_Call {
	return &MockTeamsAPI_TeamsGetTeam_Call{Call: _e.mock.On("TeamsGetTeam", ctx, teamId)}
}

func (_c *MockTeamsAPI_TeamsGetTeam_Call) Run(run func(ctx context.Context, teamId float32)) *MockTeamsAPI_TeamsGetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockTeamsAPI_TeamsGetTeam_Call) Return(apiTeamsGetTeamRequest ApiTeamsGetTeamRequest) *MockTeamsAPI_TeamsGetTeam_Call {
	_c.Call.Return(apiTeamsGetTeamRequest)
	return _c
}

func (_c *MockTeamsAPI_TeamsGetTeam_Call) RunAndReturn(run func(ctx context.Context, teamId float32) ApiTeamsGetTeamRequest) *MockTeamsAPI_TeamsGetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// TeamsGetTeamExecute provides a mock function for the type MockTeamsAPI
func (_mock *MockTeamsAPI) TeamsGetTeamExecute(r ApiTeamsGetTeamRequest) (*TeamsGetTeam200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TeamsGetTeamExecute")
	}

	var r0 *TeamsGetTeam200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiTeamsGetTeamRequest) (*TeamsGetTeam200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiTeamsGetTeamRequest) *TeamsGetTeam200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TeamsGetTeam200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiTeamsGetTeamRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiTeamsGetTeamRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTeamsAPI_TeamsGetTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamsGetTeamExecute'
type MockTeamsAPI_TeamsGetTeamExecute_Call struct {
	*mock.Call
}

// TeamsGetTeamExecute is a helper method to define mock.On call
//   - r
func (_e *MockTeamsAPI_Expecter) TeamsGetTeamExecute(r interface{}) *MockTeamsAPI_TeamsGetTeamExecute_Call {
	return &MockTeamsAPI_TeamsGetTeamExecute_Call{Call: _e.mock.On("TeamsGetTeamExecute", r)}
}

func (_c *MockTeamsAPI_TeamsGetTeamExecute_Call) Run(run func(r ApiTeamsGetTeamRequest)) *MockTeamsAPI_TeamsGetTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiTeamsGetTeamRequest))
	})
	return _c
}

func (_c *MockTeamsAPI_TeamsGetTeamExecute_Call) Return(teamsGetTeam200Response *TeamsGetTeam200Response, response *http.Response, err error) *MockTeamsAPI_TeamsGetTeamExecute_Call {
	_c.Call.Return(teamsGetTeam200Response, response, err)
	return _c
}

func (_c *MockTeamsAPI_TeamsGetTeamExecute_Call) RunAndReturn(run func(r ApiTeamsGetTeamRequest) (*TeamsGetTeam200Response, *http.Response, error)) *MockTeamsAPI_TeamsGetTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TeamsListTeams provides a mock function for the type MockTeamsAPI
func (_mock *MockTeamsAPI) TeamsListTeams(ctx context.Context) ApiTeamsListTeamsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TeamsListTeams")
	}

	var r0 ApiTeamsListTeamsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) ApiTeamsListTeamsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(ApiTeamsListTeamsRequest)
	}
	return r0
}

// MockTeamsAPI_TeamsListTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamsListTeams'
type MockTeamsAPI_TeamsListTeams_Call struct {
	*mock.Call
}

// TeamsListTeams is a helper method to define mock.On call
//   - ctx
func (_e *MockTeamsAPI_Expecter) TeamsListTeams(ctx interface{}) *MockTeamsAPI_TeamsListTeams_Call {
	return &MockTeamsAPI_TeamsListTeams_Call{Call: _e.mock.On("TeamsListTeams", ctx)}
}

func (_c *MockTeamsAPI_TeamsListTeams_Call) Run(run func(ctx context.Context)) *MockTeamsAPI_TeamsListTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTeamsAPI_TeamsListTeams_Call) Return(apiTeamsListTeamsRequest ApiTeamsListTeamsRequest) *MockTeamsAPI_TeamsListTeams_Call {
	_c.Call.Return(apiTeamsListTeamsRequest)
	return _c
}

func (_c *MockTeamsAPI_TeamsListTeams_Call) RunAndReturn(run func(ctx context.Context) ApiTeamsListTeamsRequest) *MockTeamsAPI_TeamsListTeams_Call {
	_c.Call.Return(run)
	return _c
}

// TeamsListTeamsExecute provides a mock function for the type MockTeamsAPI
func (_mock *MockTeamsAPI) TeamsListTeamsExecute(r ApiTeamsListTeamsRequest) ([]TeamsListTeams200ResponseInner, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TeamsListTeamsExecute")
	}

	var r0 []TeamsListTeams200ResponseInner
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiTeamsListTeamsRequest) ([]TeamsListTeams200ResponseInner, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiTeamsListTeamsRequest) []TeamsListTeams200ResponseInner); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TeamsListTeams200ResponseInner)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiTeamsListTeamsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiTeamsListTeamsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTeamsAPI_TeamsListTeamsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamsListTeamsExecute'
type MockTeamsAPI_TeamsListTeamsExecute_Call struct {
	*mock.Call
}

// TeamsListTeamsExecute is a helper method to define mock.On call
//   - r
func (_e *MockTeamsAPI_Expecter) TeamsListTeamsExecute(r interface{}) *MockTeamsAPI_TeamsListTeamsExecute_Call {
	return &MockTeamsAPI_TeamsListTeamsExecute_Call{Call: _e.mock.On("TeamsListTeamsExecute", r)}
}

func (_c *MockTeamsAPI_TeamsListTeamsExecute_Call) Run(run func(r ApiTeamsListTeamsRequest)) *MockTeamsAPI_TeamsListTeamsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiTeamsListTeamsRequest))
	})
	return _c
}

func (_c *MockTeamsAPI_TeamsListTeamsExecute_Call) Return(teamsListTeams200ResponseInners []TeamsListTeams200ResponseInner, response *http.Response, err error) *MockTeamsAPI_TeamsListTeamsExecute_Call {
	_c.Call.Return(teamsListTeams200ResponseInners, response, err)
	return _c
}

func (_c *MockTeamsAPI_TeamsListTeamsExecute_Call) RunAndReturn(run func(r ApiTeamsListTeamsRequest) ([]TeamsListTeams200ResponseInner, *http.Response, error)) *MockTeamsAPI_TeamsListTeamsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkspacesAPI creates a new instance of MockWorkspacesAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkspacesAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkspacesAPI {
	mock := &MockWorkspacesAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWorkspacesAPI is an autogenerated mock type for the WorkspacesAPI type
type MockWorkspacesAPI struct {
	mock.Mock
}

type MockWorkspacesAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkspacesAPI) EXPECT() *MockWorkspacesAPI_Expecter {
	return &MockWorkspacesAPI_Expecter{mock: &_m.Mock}
}

// WorkspacesCreateWorkspace provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesCreateWorkspace(ctx context.Context) ApiWorkspacesCreateWorkspaceRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesCreateWorkspace")
	}

	var r0 ApiWorkspacesCreateWorkspaceRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) ApiWorkspacesCreateWorkspaceRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesCreateWorkspaceRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesCreateWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesCreateWorkspace'
type MockWorkspacesAPI_WorkspacesCreateWorkspace_Call struct {
	*mock.Call
}

// WorkspacesCreateWorkspace is a helper method to define mock.On call
//   - ctx
func (_e *MockWorkspacesAPI_Expecter) WorkspacesCreateWorkspace(ctx interface{}) *MockWorkspacesAPI_WorkspacesCreateWorkspace_Call {
	return &MockWorkspacesAPI_WorkspacesCreateWorkspace_Call{Call: _e.mock.On("WorkspacesCreateWorkspace", ctx)}
}

func (_c *MockWorkspacesAPI_WorkspacesCreateWorkspace_Call) Run(run func(ctx context.Context)) *MockWorkspacesAPI_WorkspacesCreateWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesCreateWorkspace_Call) Return(apiWorkspacesCreateWorkspaceRequest ApiWorkspacesCreateWorkspaceRequest) *MockWorkspacesAPI_WorkspacesCreateWorkspace_Call {
	_c.Call.Return(apiWorkspacesCreateWorkspaceRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesCreateWorkspace_Call) RunAndReturn(run func(ctx context.Context) ApiWorkspacesCreateWorkspaceRequest) *MockWorkspacesAPI_WorkspacesCreateWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesCreateWorkspaceExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesCreateWorkspaceExecute(r ApiWorkspacesCreateWorkspaceRequest) (*WorkspacesGetWorkspace200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesCreateWorkspaceExecute")
	}

	var r0 *WorkspacesGetWorkspace200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesCreateWorkspaceRequest) (*WorkspacesGetWorkspace200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesCreateWorkspaceRequest) *WorkspacesGetWorkspace200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WorkspacesGetWorkspace200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesCreateWorkspaceRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiWorkspacesCreateWorkspaceRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWorkspacesAPI_WorkspacesCreateWorkspaceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesCreateWorkspaceExecute'
type MockWorkspacesAPI_WorkspacesCreateWorkspaceExecute_Call struct {
	*mock.Call
}

// WorkspacesCreateWorkspaceExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesCreateWorkspaceExecute(r interface{}) *MockWorkspacesAPI_WorkspacesCreateWorkspaceExecute_Call {
	return &MockWorkspacesAPI_WorkspacesCreateWorkspaceExecute_Call{Call: _e.mock.On("WorkspacesCreateWorkspaceExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesCreateWorkspaceExecute_Call) Run(run func(r ApiWorkspacesCreateWorkspaceRequest)) *MockWorkspacesAPI_WorkspacesCreateWorkspaceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesCreateWorkspaceRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesCreateWorkspaceExecute_Call) Return(workspacesGetWorkspace200Response *WorkspacesGetWorkspace200Response, response *http.Response, err error) *MockWorkspacesAPI_WorkspacesCreateWorkspaceExecute_Call {
	_c.Call.Return(workspacesGetWorkspace200Response, response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesCreateWorkspaceExecute_Call) RunAndReturn(run func(r ApiWorkspacesCreateWorkspaceRequest) (*WorkspacesGetWorkspace200Response, *http.Response, error)) *MockWorkspacesAPI_WorkspacesCreateWorkspaceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesDeleteEnvVar provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesDeleteEnvVar(ctx context.Context, workspaceId float32) ApiWorkspacesDeleteEnvVarRequest {
	ret := _mock.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesDeleteEnvVar")
	}

	var r0 ApiWorkspacesDeleteEnvVarRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesDeleteEnvVarRequest); ok {
		r0 = returnFunc(ctx, workspaceId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesDeleteEnvVarRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesDeleteEnvVar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesDeleteEnvVar'
type MockWorkspacesAPI_WorkspacesDeleteEnvVar_Call struct {
	*mock.Call
}

// WorkspacesDeleteEnvVar is a helper method to define mock.On call
//   - ctx
//   - workspaceId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesDeleteEnvVar(ctx interface{}, workspaceId interface{}) *MockWorkspacesAPI_WorkspacesDeleteEnvVar_Call {
	return &MockWorkspacesAPI_WorkspacesDeleteEnvVar_Call{Call: _e.mock.On("WorkspacesDeleteEnvVar", ctx, workspaceId)}
}

func (_c *MockWorkspacesAPI_WorkspacesDeleteEnvVar_Call) Run(run func(ctx context.Context, workspaceId float32)) *MockWorkspacesAPI_WorkspacesDeleteEnvVar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeleteEnvVar_Call) Return(apiWorkspacesDeleteEnvVarRequest ApiWorkspacesDeleteEnvVarRequest) *MockWorkspacesAPI_WorkspacesDeleteEnvVar_Call {
	_c.Call.Return(apiWorkspacesDeleteEnvVarRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeleteEnvVar_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32) ApiWorkspacesDeleteEnvVarRequest) *MockWorkspacesAPI_WorkspacesDeleteEnvVar_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesDeleteEnvVarExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesDeleteEnvVarExecute(r ApiWorkspacesDeleteEnvVarRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesDeleteEnvVarExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesDeleteEnvVarRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesDeleteEnvVarRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesDeleteEnvVarRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesDeleteEnvVarExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesDeleteEnvVarExecute'
type MockWorkspacesAPI_WorkspacesDeleteEnvVarExecute_Call struct {
	*mock.Call
}

// WorkspacesDeleteEnvVarExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesDeleteEnvVarExecute(r interface{}) *MockWorkspacesAPI_WorkspacesDeleteEnvVarExecute_Call {
	return &MockWorkspacesAPI_WorkspacesDeleteEnvVarExecute_Call{Call: _e.mock.On("WorkspacesDeleteEnvVarExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesDeleteEnvVarExecute_Call) Run(run func(r ApiWorkspacesDeleteEnvVarRequest)) *MockWorkspacesAPI_WorkspacesDeleteEnvVarExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesDeleteEnvVarRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeleteEnvVarExecute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesDeleteEnvVarExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeleteEnvVarExecute_Call) RunAndReturn(run func(r ApiWorkspacesDeleteEnvVarRequest) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesDeleteEnvVarExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesDeleteWorkspace provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesDeleteWorkspace(ctx context.Context, workspaceId float32) ApiWorkspacesDeleteWorkspaceRequest {
	ret := _mock.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesDeleteWorkspace")
	}

	var r0 ApiWorkspacesDeleteWorkspaceRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesDeleteWorkspaceRequest); ok {
		r0 = returnFunc(ctx, workspaceId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesDeleteWorkspaceRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesDeleteWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesDeleteWorkspace'
type MockWorkspacesAPI_WorkspacesDeleteWorkspace_Call struct {
	*mock.Call
}

// WorkspacesDeleteWorkspace is a helper method to define mock.On call
//   - ctx
//   - workspaceId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesDeleteWorkspace(ctx interface{}, workspaceId interface{}) *MockWorkspacesAPI_WorkspacesDeleteWorkspace_Call {
	return &MockWorkspacesAPI_WorkspacesDeleteWorkspace_Call{Call: _e.mock.On("WorkspacesDeleteWorkspace", ctx, workspaceId)}
}

func (_c *MockWorkspacesAPI_WorkspacesDeleteWorkspace_Call) Run(run func(ctx context.Context, workspaceId float32)) *MockWorkspacesAPI_WorkspacesDeleteWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeleteWorkspace_Call) Return(apiWorkspacesDeleteWorkspaceRequest ApiWorkspacesDeleteWorkspaceRequest) *MockWorkspacesAPI_WorkspacesDeleteWorkspace_Call {
	_c.Call.Return(apiWorkspacesDeleteWorkspaceRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeleteWorkspace_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32) ApiWorkspacesDeleteWorkspaceRequest) *MockWorkspacesAPI_WorkspacesDeleteWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesDeleteWorkspaceExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesDeleteWorkspaceExecute(r ApiWorkspacesDeleteWorkspaceRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesDeleteWorkspaceExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesDeleteWorkspaceRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesDeleteWorkspaceRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesDeleteWorkspaceRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesDeleteWorkspaceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesDeleteWorkspaceExecute'
type MockWorkspacesAPI_WorkspacesDeleteWorkspaceExecute_Call struct {
	*mock.Call
}

// WorkspacesDeleteWorkspaceExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesDeleteWorkspaceExecute(r interface{}) *MockWorkspacesAPI_WorkspacesDeleteWorkspaceExecute_Call {
	return &MockWorkspacesAPI_WorkspacesDeleteWorkspaceExecute_Call{Call: _e.mock.On("WorkspacesDeleteWorkspaceExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesDeleteWorkspaceExecute_Call) Run(run func(r ApiWorkspacesDeleteWorkspaceRequest)) *MockWorkspacesAPI_WorkspacesDeleteWorkspaceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesDeleteWorkspaceRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeleteWorkspaceExecute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesDeleteWorkspaceExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeleteWorkspaceExecute_Call) RunAndReturn(run func(r ApiWorkspacesDeleteWorkspaceRequest) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesDeleteWorkspaceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesDeployLandscape provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesDeployLandscape(ctx context.Context, workspaceId float32) ApiWorkspacesDeployLandscapeRequest {
	ret := _mock.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesDeployLandscape")
	}

	var r0 ApiWorkspacesDeployLandscapeRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesDeployLandscapeRequest); ok {
		r0 = returnFunc(ctx, workspaceId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesDeployLandscapeRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesDeployLandscape_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesDeployLandscape'
type MockWorkspacesAPI_WorkspacesDeployLandscape_Call struct {
	*mock.Call
}

// WorkspacesDeployLandscape is a helper method to define mock.On call
//   - ctx
//   - workspaceId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesDeployLandscape(ctx interface{}, workspaceId interface{}) *MockWorkspacesAPI_WorkspacesDeployLandscape_Call {
	return &MockWorkspacesAPI_WorkspacesDeployLandscape_Call{Call: _e.mock.On("WorkspacesDeployLandscape", ctx, workspaceId)}
}

func (_c *MockWorkspacesAPI_WorkspacesDeployLandscape_Call) Run(run func(ctx context.Context, workspaceId float32)) *MockWorkspacesAPI_WorkspacesDeployLandscape_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeployLandscape_Call) Return(apiWorkspacesDeployLandscapeRequest ApiWorkspacesDeployLandscapeRequest) *MockWorkspacesAPI_WorkspacesDeployLandscape_Call {
	_c.Call.Return(apiWorkspacesDeployLandscapeRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeployLandscape_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32) ApiWorkspacesDeployLandscapeRequest) *MockWorkspacesAPI_WorkspacesDeployLandscape_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesDeployLandscape1 provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesDeployLandscape1(ctx context.Context, workspaceId float32, profile string) ApiWorkspacesDeployLandscape1Request {
	ret := _mock.Called(ctx, workspaceId, profile)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesDeployLandscape1")
	}

	var r0 ApiWorkspacesDeployLandscape1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string) ApiWorkspacesDeployLandscape1Request); ok {
		r0 = returnFunc(ctx, workspaceId, profile)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesDeployLandscape1Request)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesDeployLandscape1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesDeployLandscape1'
type MockWorkspacesAPI_WorkspacesDeployLandscape1_Call struct {
	*mock.Call
}

// WorkspacesDeployLandscape1 is a helper method to define mock.On call
//   - ctx
//   - workspaceId
//   - profile
func (_e *MockWorkspacesAPI_Expecter) WorkspacesDeployLandscape1(ctx interface{}, workspaceId interface{}, profile interface{}) *MockWorkspacesAPI_WorkspacesDeployLandscape1_Call {
	return &MockWorkspacesAPI_WorkspacesDeployLandscape1_Call{Call: _e.mock.On("WorkspacesDeployLandscape1", ctx, workspaceId, profile)}
}

func (_c *MockWorkspacesAPI_WorkspacesDeployLandscape1_Call) Run(run func(ctx context.Context, workspaceId float32, profile string)) *MockWorkspacesAPI_WorkspacesDeployLandscape1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeployLandscape1_Call) Return(apiWorkspacesDeployLandscape1Request ApiWorkspacesDeployLandscape1Request) *MockWorkspacesAPI_WorkspacesDeployLandscape1_Call {
	_c.Call.Return(apiWorkspacesDeployLandscape1Request)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeployLandscape1_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32, profile string) ApiWorkspacesDeployLandscape1Request) *MockWorkspacesAPI_WorkspacesDeployLandscape1_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesDeployLandscape1Execute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesDeployLandscape1Execute(r ApiWorkspacesDeployLandscape1Request) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesDeployLandscape1Execute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesDeployLandscape1Request) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesDeployLandscape1Request) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesDeployLandscape1Request) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesDeployLandscape1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesDeployLandscape1Execute'
type MockWorkspacesAPI_WorkspacesDeployLandscape1Execute_Call struct {
	*mock.Call
}

// WorkspacesDeployLandscape1Execute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesDeployLandscape1Execute(r interface{}) *MockWorkspacesAPI_WorkspacesDeployLandscape1Execute_Call {
	return &MockWorkspacesAPI_WorkspacesDeployLandscape1Execute_Call{Call: _e.mock.On("WorkspacesDeployLandscape1Execute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesDeployLandscape1Execute_Call) Run(run func(r ApiWorkspacesDeployLandscape1Request)) *MockWorkspacesAPI_WorkspacesDeployLandscape1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesDeployLandscape1Request))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeployLandscape1Execute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesDeployLandscape1Execute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeployLandscape1Execute_Call) RunAndReturn(run func(r ApiWorkspacesDeployLandscape1Request) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesDeployLandscape1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesDeployLandscapeExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesDeployLandscapeExecute(r ApiWorkspacesDeployLandscapeRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesDeployLandscapeExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesDeployLandscapeRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesDeployLandscapeRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesDeployLandscapeRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesDeployLandscapeExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesDeployLandscapeExecute'
type MockWorkspacesAPI_WorkspacesDeployLandscapeExecute_Call struct {
	*mock.Call
}

// WorkspacesDeployLandscapeExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesDeployLandscapeExecute(r interface{}) *MockWorkspacesAPI_WorkspacesDeployLandscapeExecute_Call {
	return &MockWorkspacesAPI_WorkspacesDeployLandscapeExecute_Call{Call: _e.mock.On("WorkspacesDeployLandscapeExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesDeployLandscapeExecute_Call) Run(run func(r ApiWorkspacesDeployLandscapeRequest)) *MockWorkspacesAPI_WorkspacesDeployLandscapeExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesDeployLandscapeRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeployLandscapeExecute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesDeployLandscapeExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesDeployLandscapeExecute_Call) RunAndReturn(run func(r ApiWorkspacesDeployLandscapeRequest) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesDeployLandscapeExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesExecuteCommand provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesExecuteCommand(ctx context.Context, workspaceId float32) ApiWorkspacesExecuteCommandRequest {
	ret := _mock.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesExecuteCommand")
	}

	var r0 ApiWorkspacesExecuteCommandRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesExecuteCommandRequest); ok {
		r0 = returnFunc(ctx, workspaceId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesExecuteCommandRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesExecuteCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesExecuteCommand'
type MockWorkspacesAPI_WorkspacesExecuteCommand_Call struct {
	*mock.Call
}

// WorkspacesExecuteCommand is a helper method to define mock.On call
//   - ctx
//   - workspaceId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesExecuteCommand(ctx interface{}, workspaceId interface{}) *MockWorkspacesAPI_WorkspacesExecuteCommand_Call {
	return &MockWorkspacesAPI_WorkspacesExecuteCommand_Call{Call: _e.mock.On("WorkspacesExecuteCommand", ctx, workspaceId)}
}

func (_c *MockWorkspacesAPI_WorkspacesExecuteCommand_Call) Run(run func(ctx context.Context, workspaceId float32)) *MockWorkspacesAPI_WorkspacesExecuteCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesExecuteCommand_Call) Return(apiWorkspacesExecuteCommandRequest ApiWorkspacesExecuteCommandRequest) *MockWorkspacesAPI_WorkspacesExecuteCommand_Call {
	_c.Call.Return(apiWorkspacesExecuteCommandRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesExecuteCommand_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32) ApiWorkspacesExecuteCommandRequest) *MockWorkspacesAPI_WorkspacesExecuteCommand_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesExecuteCommandExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesExecuteCommandExecute(r ApiWorkspacesExecuteCommandRequest) (*WorkspacesExecuteCommand200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesExecuteCommandExecute")
	}

	var r0 *WorkspacesExecuteCommand200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesExecuteCommandRequest) (*WorkspacesExecuteCommand200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesExecuteCommandRequest) *WorkspacesExecuteCommand200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WorkspacesExecuteCommand200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesExecuteCommandRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiWorkspacesExecuteCommandRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWorkspacesAPI_WorkspacesExecuteCommandExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesExecuteCommandExecute'
type MockWorkspacesAPI_WorkspacesExecuteCommandExecute_Call struct {
	*mock.Call
}

// WorkspacesExecuteCommandExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesExecuteCommandExecute(r interface{}) *MockWorkspacesAPI_WorkspacesExecuteCommandExecute_Call {
	return &MockWorkspacesAPI_WorkspacesExecuteCommandExecute_Call{Call: _e.mock.On("WorkspacesExecuteCommandExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesExecuteCommandExecute_Call) Run(run func(r ApiWorkspacesExecuteCommandRequest)) *MockWorkspacesAPI_WorkspacesExecuteCommandExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesExecuteCommandRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesExecuteCommandExecute_Call) Return(workspacesExecuteCommand200Response *WorkspacesExecuteCommand200Response, response *http.Response, err error) *MockWorkspacesAPI_WorkspacesExecuteCommandExecute_Call {
	_c.Call.Return(workspacesExecuteCommand200Response, response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesExecuteCommandExecute_Call) RunAndReturn(run func(r ApiWorkspacesExecuteCommandRequest) (*WorkspacesExecuteCommand200Response, *http.Response, error)) *MockWorkspacesAPI_WorkspacesExecuteCommandExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGetWorkspace provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesGetWorkspace(ctx context.Context, workspaceId float32) ApiWorkspacesGetWorkspaceRequest {
	ret := _mock.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGetWorkspace")
	}

	var r0 ApiWorkspacesGetWorkspaceRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesGetWorkspaceRequest); ok {
		r0 = returnFunc(ctx, workspaceId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesGetWorkspaceRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesGetWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGetWorkspace'
type MockWorkspacesAPI_WorkspacesGetWorkspace_Call struct {
	*mock.Call
}

// WorkspacesGetWorkspace is a helper method to define mock.On call
//   - ctx
//   - workspaceId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesGetWorkspace(ctx interface{}, workspaceId interface{}) *MockWorkspacesAPI_WorkspacesGetWorkspace_Call {
	return &MockWorkspacesAPI_WorkspacesGetWorkspace_Call{Call: _e.mock.On("WorkspacesGetWorkspace", ctx, workspaceId)}
}

func (_c *MockWorkspacesAPI_WorkspacesGetWorkspace_Call) Run(run func(ctx context.Context, workspaceId float32)) *MockWorkspacesAPI_WorkspacesGetWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGetWorkspace_Call) Return(apiWorkspacesGetWorkspaceRequest ApiWorkspacesGetWorkspaceRequest) *MockWorkspacesAPI_WorkspacesGetWorkspace_Call {
	_c.Call.Return(apiWorkspacesGetWorkspaceRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGetWorkspace_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32) ApiWorkspacesGetWorkspaceRequest) *MockWorkspacesAPI_WorkspacesGetWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGetWorkspaceExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesGetWorkspaceExecute(r ApiWorkspacesGetWorkspaceRequest) (*WorkspacesGetWorkspace200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGetWorkspaceExecute")
	}

	var r0 *WorkspacesGetWorkspace200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesGetWorkspaceRequest) (*WorkspacesGetWorkspace200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesGetWorkspaceRequest) *WorkspacesGetWorkspace200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WorkspacesGetWorkspace200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesGetWorkspaceRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiWorkspacesGetWorkspaceRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWorkspacesAPI_WorkspacesGetWorkspaceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGetWorkspaceExecute'
type MockWorkspacesAPI_WorkspacesGetWorkspaceExecute_Call struct {
	*mock.Call
}

// WorkspacesGetWorkspaceExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesGetWorkspaceExecute(r interface{}) *MockWorkspacesAPI_WorkspacesGetWorkspaceExecute_Call {
	return &MockWorkspacesAPI_WorkspacesGetWorkspaceExecute_Call{Call: _e.mock.On("WorkspacesGetWorkspaceExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesGetWorkspaceExecute_Call) Run(run func(r ApiWorkspacesGetWorkspaceRequest)) *MockWorkspacesAPI_WorkspacesGetWorkspaceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesGetWorkspaceRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGetWorkspaceExecute_Call) Return(workspacesGetWorkspace200Response *WorkspacesGetWorkspace200Response, response *http.Response, err error) *MockWorkspacesAPI_WorkspacesGetWorkspaceExecute_Call {
	_c.Call.Return(workspacesGetWorkspace200Response, response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGetWorkspaceExecute_Call) RunAndReturn(run func(r ApiWorkspacesGetWorkspaceRequest) (*WorkspacesGetWorkspace200Response, *http.Response, error)) *MockWorkspacesAPI_WorkspacesGetWorkspaceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGetWorkspaceStatus provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesGetWorkspaceStatus(ctx context.Context, workspaceId float32) ApiWorkspacesGetWorkspaceStatusRequest {
	ret := _mock.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGetWorkspaceStatus")
	}

	var r0 ApiWorkspacesGetWorkspaceStatusRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesGetWorkspaceStatusRequest); ok {
		r0 = returnFunc(ctx, workspaceId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesGetWorkspaceStatusRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesGetWorkspaceStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGetWorkspaceStatus'
type MockWorkspacesAPI_WorkspacesGetWorkspaceStatus_Call struct {
	*mock.Call
}

// WorkspacesGetWorkspaceStatus is a helper method to define mock.On call
//   - ctx
//   - workspaceId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesGetWorkspaceStatus(ctx interface{}, workspaceId interface{}) *MockWorkspacesAPI_WorkspacesGetWorkspaceStatus_Call {
	return &MockWorkspacesAPI_WorkspacesGetWorkspaceStatus_Call{Call: _e.mock.On("WorkspacesGetWorkspaceStatus", ctx, workspaceId)}
}

func (_c *MockWorkspacesAPI_WorkspacesGetWorkspaceStatus_Call) Run(run func(ctx context.Context, workspaceId float32)) *MockWorkspacesAPI_WorkspacesGetWorkspaceStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGetWorkspaceStatus_Call) Return(apiWorkspacesGetWorkspaceStatusRequest ApiWorkspacesGetWorkspaceStatusRequest) *MockWorkspacesAPI_WorkspacesGetWorkspaceStatus_Call {
	_c.Call.Return(apiWorkspacesGetWorkspaceStatusRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGetWorkspaceStatus_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32) ApiWorkspacesGetWorkspaceStatusRequest) *MockWorkspacesAPI_WorkspacesGetWorkspaceStatus_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGetWorkspaceStatusExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesGetWorkspaceStatusExecute(r ApiWorkspacesGetWorkspaceStatusRequest) (*WorkspacesGetWorkspaceStatus200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGetWorkspaceStatusExecute")
	}

	var r0 *WorkspacesGetWorkspaceStatus200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesGetWorkspaceStatusRequest) (*WorkspacesGetWorkspaceStatus200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesGetWorkspaceStatusRequest) *WorkspacesGetWorkspaceStatus200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WorkspacesGetWorkspaceStatus200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesGetWorkspaceStatusRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiWorkspacesGetWorkspaceStatusRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWorkspacesAPI_WorkspacesGetWorkspaceStatusExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGetWorkspaceStatusExecute'
type MockWorkspacesAPI_WorkspacesGetWorkspaceStatusExecute_Call struct {
	*mock.Call
}

// WorkspacesGetWorkspaceStatusExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesGetWorkspaceStatusExecute(r interface{}) *MockWorkspacesAPI_WorkspacesGetWorkspaceStatusExecute_Call {
	return &MockWorkspacesAPI_WorkspacesGetWorkspaceStatusExecute_Call{Call: _e.mock.On("WorkspacesGetWorkspaceStatusExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesGetWorkspaceStatusExecute_Call) Run(run func(r ApiWorkspacesGetWorkspaceStatusRequest)) *MockWorkspacesAPI_WorkspacesGetWorkspaceStatusExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesGetWorkspaceStatusRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGetWorkspaceStatusExecute_Call) Return(workspacesGetWorkspaceStatus200Response *WorkspacesGetWorkspaceStatus200Response, response *http.Response, err error) *MockWorkspacesAPI_WorkspacesGetWorkspaceStatusExecute_Call {
	_c.Call.Return(workspacesGetWorkspaceStatus200Response, response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGetWorkspaceStatusExecute_Call) RunAndReturn(run func(r ApiWorkspacesGetWorkspaceStatusRequest) (*WorkspacesGetWorkspaceStatus200Response, *http.Response, error)) *MockWorkspacesAPI_WorkspacesGetWorkspaceStatusExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGitHead provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesGitHead(ctx context.Context, workspaceId float32) ApiWorkspacesGitHeadRequest {
	ret := _mock.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGitHead")
	}

	var r0 ApiWorkspacesGitHeadRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesGitHeadRequest); ok {
		r0 = returnFunc(ctx, workspaceId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesGitHeadRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesGitHead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGitHead'
type MockWorkspacesAPI_WorkspacesGitHead_Call struct {
	*mock.Call
}

// WorkspacesGitHead is a helper method to define mock.On call
//   - ctx
//   - workspaceId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesGitHead(ctx interface{}, workspaceId interface{}) *MockWorkspacesAPI_WorkspacesGitHead_Call {
	return &MockWorkspacesAPI_WorkspacesGitHead_Call{Call: _e.mock.On("WorkspacesGitHead", ctx, workspaceId)}
}

func (_c *MockWorkspacesAPI_WorkspacesGitHead_Call) Run(run func(ctx context.Context, workspaceId float32)) *MockWorkspacesAPI_WorkspacesGitHead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitHead_Call) Return(apiWorkspacesGitHeadRequest ApiWorkspacesGitHeadRequest) *MockWorkspacesAPI_WorkspacesGitHead_Call {
	_c.Call.Return(apiWorkspacesGitHeadRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitHead_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32) ApiWorkspacesGitHeadRequest) *MockWorkspacesAPI_WorkspacesGitHead_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGitHeadExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesGitHeadExecute(r ApiWorkspacesGitHeadRequest) (*WorkspacesGitHead200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGitHeadExecute")
	}

	var r0 *WorkspacesGitHead200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesGitHeadRequest) (*WorkspacesGitHead200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesGitHeadRequest) *WorkspacesGitHead200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WorkspacesGitHead200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesGitHeadRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiWorkspacesGitHeadRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWorkspacesAPI_WorkspacesGitHeadExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGitHeadExecute'
type MockWorkspacesAPI_WorkspacesGitHeadExecute_Call struct {
	*mock.Call
}

// WorkspacesGitHeadExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesGitHeadExecute(r interface{}) *MockWorkspacesAPI_WorkspacesGitHeadExecute_Call {
	return &MockWorkspacesAPI_WorkspacesGitHeadExecute_Call{Call: _e.mock.On("WorkspacesGitHeadExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesGitHeadExecute_Call) Run(run func(r ApiWorkspacesGitHeadRequest)) *MockWorkspacesAPI_WorkspacesGitHeadExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesGitHeadRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitHeadExecute_Call) Return(workspacesGitHead200Response *WorkspacesGitHead200Response, response *http.Response, err error) *MockWorkspacesAPI_WorkspacesGitHeadExecute_Call {
	_c.Call.Return(workspacesGitHead200Response, response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitHeadExecute_Call) RunAndReturn(run func(r ApiWorkspacesGitHeadRequest) (*WorkspacesGitHead200Response, *http.Response, error)) *MockWorkspacesAPI_WorkspacesGitHeadExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGitPull provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesGitPull(ctx context.Context, workspaceId float32) ApiWorkspacesGitPullRequest {
	ret := _mock.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGitPull")
	}

	var r0 ApiWorkspacesGitPullRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesGitPullRequest); ok {
		r0 = returnFunc(ctx, workspaceId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesGitPullRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesGitPull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGitPull'
type MockWorkspacesAPI_WorkspacesGitPull_Call struct {
	*mock.Call
}

// WorkspacesGitPull is a helper method to define mock.On call
//   - ctx
//   - workspaceId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesGitPull(ctx interface{}, workspaceId interface{}) *MockWorkspacesAPI_WorkspacesGitPull_Call {
	return &MockWorkspacesAPI_WorkspacesGitPull_Call{Call: _e.mock.On("WorkspacesGitPull", ctx, workspaceId)}
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull_Call) Run(run func(ctx context.Context, workspaceId float32)) *MockWorkspacesAPI_WorkspacesGitPull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull_Call) Return(apiWorkspacesGitPullRequest ApiWorkspacesGitPullRequest) *MockWorkspacesAPI_WorkspacesGitPull_Call {
	_c.Call.Return(apiWorkspacesGitPullRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32) ApiWorkspacesGitPullRequest) *MockWorkspacesAPI_WorkspacesGitPull_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGitPull1 provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesGitPull1(ctx context.Context, workspaceId float32, remote string) ApiWorkspacesGitPull1Request {
	ret := _mock.Called(ctx, workspaceId, remote)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGitPull1")
	}

	var r0 ApiWorkspacesGitPull1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string) ApiWorkspacesGitPull1Request); ok {
		r0 = returnFunc(ctx, workspaceId, remote)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesGitPull1Request)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesGitPull1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGitPull1'
type MockWorkspacesAPI_WorkspacesGitPull1_Call struct {
	*mock.Call
}

// WorkspacesGitPull1 is a helper method to define mock.On call
//   - ctx
//   - workspaceId
//   - remote
func (_e *MockWorkspacesAPI_Expecter) WorkspacesGitPull1(ctx interface{}, workspaceId interface{}, remote interface{}) *MockWorkspacesAPI_WorkspacesGitPull1_Call {
	return &MockWorkspacesAPI_WorkspacesGitPull1_Call{Call: _e.mock.On("WorkspacesGitPull1", ctx, workspaceId, remote)}
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull1_Call) Run(run func(ctx context.Context, workspaceId float32, remote string)) *MockWorkspacesAPI_WorkspacesGitPull1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull1_Call) Return(apiWorkspacesGitPull1Request ApiWorkspacesGitPull1Request) *MockWorkspacesAPI_WorkspacesGitPull1_Call {
	_c.Call.Return(apiWorkspacesGitPull1Request)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull1_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32, remote string) ApiWorkspacesGitPull1Request) *MockWorkspacesAPI_WorkspacesGitPull1_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGitPull1Execute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesGitPull1Execute(r ApiWorkspacesGitPull1Request) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGitPull1Execute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesGitPull1Request) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesGitPull1Request) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesGitPull1Request) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesGitPull1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGitPull1Execute'
type MockWorkspacesAPI_WorkspacesGitPull1Execute_Call struct {
	*mock.Call
}

// WorkspacesGitPull1Execute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesGitPull1Execute(r interface{}) *MockWorkspacesAPI_WorkspacesGitPull1Execute_Call {
	return &MockWorkspacesAPI_WorkspacesGitPull1Execute_Call{Call: _e.mock.On("WorkspacesGitPull1Execute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull1Execute_Call) Run(run func(r ApiWorkspacesGitPull1Request)) *MockWorkspacesAPI_WorkspacesGitPull1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesGitPull1Request))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull1Execute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesGitPull1Execute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull1Execute_Call) RunAndReturn(run func(r ApiWorkspacesGitPull1Request) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesGitPull1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGitPull2 provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesGitPull2(ctx context.Context, workspaceId float32, remote string, branch string) ApiWorkspacesGitPull2Request {
	ret := _mock.Called(ctx, workspaceId, remote, branch)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGitPull2")
	}

	var r0 ApiWorkspacesGitPull2Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string, string) ApiWorkspacesGitPull2Request); ok {
		r0 = returnFunc(ctx, workspaceId, remote, branch)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesGitPull2Request)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesGitPull2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGitPull2'
type MockWorkspacesAPI_WorkspacesGitPull2_Call struct {
	*mock.Call
}

// WorkspacesGitPull2 is a helper method to define mock.On call
//   - ctx
//   - workspaceId
//   - remote
//   - branch
func (_e *MockWorkspacesAPI_Expecter) WorkspacesGitPull2(ctx interface{}, workspaceId interface{}, remote interface{}, branch interface{}) *MockWorkspacesAPI_WorkspacesGitPull2_Call {
	return &MockWorkspacesAPI_WorkspacesGitPull2_Call{Call: _e.mock.On("WorkspacesGitPull2", ctx, workspaceId, remote, branch)}
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull2_Call) Run(run func(ctx context.Context, workspaceId float32, remote string, branch string)) *MockWorkspacesAPI_WorkspacesGitPull2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull2_Call) Return(apiWorkspacesGitPull2Request ApiWorkspacesGitPull2Request) *MockWorkspacesAPI_WorkspacesGitPull2_Call {
	_c.Call.Return(apiWorkspacesGitPull2Request)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull2_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32, remote string, branch string) ApiWorkspacesGitPull2Request) *MockWorkspacesAPI_WorkspacesGitPull2_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGitPull2Execute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesGitPull2Execute(r ApiWorkspacesGitPull2Request) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGitPull2Execute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesGitPull2Request) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesGitPull2Request) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesGitPull2Request) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesGitPull2Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGitPull2Execute'
type MockWorkspacesAPI_WorkspacesGitPull2Execute_Call struct {
	*mock.Call
}

// WorkspacesGitPull2Execute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesGitPull2Execute(r interface{}) *MockWorkspacesAPI_WorkspacesGitPull2Execute_Call {
	return &MockWorkspacesAPI_WorkspacesGitPull2Execute_Call{Call: _e.mock.On("WorkspacesGitPull2Execute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull2Execute_Call) Run(run func(r ApiWorkspacesGitPull2Request)) *MockWorkspacesAPI_WorkspacesGitPull2Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesGitPull2Request))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull2Execute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesGitPull2Execute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitPull2Execute_Call) RunAndReturn(run func(r ApiWorkspacesGitPull2Request) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesGitPull2Execute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGitPullExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesGitPullExecute(r ApiWorkspacesGitPullRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGitPullExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesGitPullRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesGitPullRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesGitPullRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesGitPullExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGitPullExecute'
type MockWorkspacesAPI_WorkspacesGitPullExecute_Call struct {
	*mock.Call
}

// WorkspacesGitPullExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesGitPullExecute(r interface{}) *MockWorkspacesAPI_WorkspacesGitPullExecute_Call {
	return &MockWorkspacesAPI_WorkspacesGitPullExecute_Call{Call: _e.mock.On("WorkspacesGitPullExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesGitPullExecute_Call) Run(run func(r ApiWorkspacesGitPullRequest)) *MockWorkspacesAPI_WorkspacesGitPullExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesGitPullRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitPullExecute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesGitPullExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesGitPullExecute_Call) RunAndReturn(run func(r ApiWorkspacesGitPullRequest) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesGitPullExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesListEnvVars provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesListEnvVars(ctx context.Context, workspaceId float32) ApiWorkspacesListEnvVarsRequest {
	ret := _mock.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesListEnvVars")
	}

	var r0 ApiWorkspacesListEnvVarsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesListEnvVarsRequest); ok {
		r0 = returnFunc(ctx, workspaceId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesListEnvVarsRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesListEnvVars_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesListEnvVars'
type MockWorkspacesAPI_WorkspacesListEnvVars_Call struct {
	*mock.Call
}

// WorkspacesListEnvVars is a helper method to define mock.On call
//   - ctx
//   - workspaceId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesListEnvVars(ctx interface{}, workspaceId interface{}) *MockWorkspacesAPI_WorkspacesListEnvVars_Call {
	return &MockWorkspacesAPI_WorkspacesListEnvVars_Call{Call: _e.mock.On("WorkspacesListEnvVars", ctx, workspaceId)}
}

func (_c *MockWorkspacesAPI_WorkspacesListEnvVars_Call) Run(run func(ctx context.Context, workspaceId float32)) *MockWorkspacesAPI_WorkspacesListEnvVars_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesListEnvVars_Call) Return(apiWorkspacesListEnvVarsRequest ApiWorkspacesListEnvVarsRequest) *MockWorkspacesAPI_WorkspacesListEnvVars_Call {
	_c.Call.Return(apiWorkspacesListEnvVarsRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesListEnvVars_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32) ApiWorkspacesListEnvVarsRequest) *MockWorkspacesAPI_WorkspacesListEnvVars_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesListEnvVarsExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesListEnvVarsExecute(r ApiWorkspacesListEnvVarsRequest) ([]WorkspacesListEnvVars200ResponseInner, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesListEnvVarsExecute")
	}

	var r0 []WorkspacesListEnvVars200ResponseInner
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesListEnvVarsRequest) ([]WorkspacesListEnvVars200ResponseInner, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesListEnvVarsRequest) []WorkspacesListEnvVars200ResponseInner); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]WorkspacesListEnvVars200ResponseInner)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesListEnvVarsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiWorkspacesListEnvVarsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWorkspacesAPI_WorkspacesListEnvVarsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesListEnvVarsExecute'
type MockWorkspacesAPI_WorkspacesListEnvVarsExecute_Call struct {
	*mock.Call
}

// WorkspacesListEnvVarsExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesListEnvVarsExecute(r interface{}) *MockWorkspacesAPI_WorkspacesListEnvVarsExecute_Call {
	return &MockWorkspacesAPI_WorkspacesListEnvVarsExecute_Call{Call: _e.mock.On("WorkspacesListEnvVarsExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesListEnvVarsExecute_Call) Run(run func(r ApiWorkspacesListEnvVarsRequest)) *MockWorkspacesAPI_WorkspacesListEnvVarsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesListEnvVarsRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesListEnvVarsExecute_Call) Return(workspacesListEnvVars200ResponseInners []WorkspacesListEnvVars200ResponseInner, response *http.Response, err error) *MockWorkspacesAPI_WorkspacesListEnvVarsExecute_Call {
	_c.Call.Return(workspacesListEnvVars200ResponseInners, response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesListEnvVarsExecute_Call) RunAndReturn(run func(r ApiWorkspacesListEnvVarsRequest) ([]WorkspacesListEnvVars200ResponseInner, *http.Response, error)) *MockWorkspacesAPI_WorkspacesListEnvVarsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesListWorkspaces provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesListWorkspaces(ctx context.Context, teamId float32) ApiWorkspacesListWorkspacesRequest {
	ret := _mock.Called(ctx, teamId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesListWorkspaces")
	}

	var r0 ApiWorkspacesListWorkspacesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesListWorkspacesRequest); ok {
		r0 = returnFunc(ctx, teamId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesListWorkspacesRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesListWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesListWorkspaces'
type MockWorkspacesAPI_WorkspacesListWorkspaces_Call struct {
	*mock.Call
}

// WorkspacesListWorkspaces is a helper method to define mock.On call
//   - ctx
//   - teamId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesListWorkspaces(ctx interface{}, teamId interface{}) *MockWorkspacesAPI_WorkspacesListWorkspaces_Call {
	return &MockWorkspacesAPI_WorkspacesListWorkspaces_Call{Call: _e.mock.On("WorkspacesListWorkspaces", ctx, teamId)}
}

func (_c *MockWorkspacesAPI_WorkspacesListWorkspaces_Call) Run(run func(ctx context.Context, teamId float32)) *MockWorkspacesAPI_WorkspacesListWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesListWorkspaces_Call) Return(apiWorkspacesListWorkspacesRequest ApiWorkspacesListWorkspacesRequest) *MockWorkspacesAPI_WorkspacesListWorkspaces_Call {
	_c.Call.Return(apiWorkspacesListWorkspacesRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesListWorkspaces_Call) RunAndReturn(run func(ctx context.Context, teamId float32) ApiWorkspacesListWorkspacesRequest) *MockWorkspacesAPI_WorkspacesListWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesListWorkspacesExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesListWorkspacesExecute(r ApiWorkspacesListWorkspacesRequest) ([]WorkspacesGetWorkspace200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesListWorkspacesExecute")
	}

	var r0 []WorkspacesGetWorkspace200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesListWorkspacesRequest) ([]WorkspacesGetWorkspace200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesListWorkspacesRequest) []WorkspacesGetWorkspace200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]WorkspacesGetWorkspace200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesListWorkspacesRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiWorkspacesListWorkspacesRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWorkspacesAPI_WorkspacesListWorkspacesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesListWorkspacesExecute'
type MockWorkspacesAPI_WorkspacesListWorkspacesExecute_Call struct {
	*mock.Call
}

// WorkspacesListWorkspacesExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesListWorkspacesExecute(r interface{}) *MockWorkspacesAPI_WorkspacesListWorkspacesExecute_Call {
	return &MockWorkspacesAPI_WorkspacesListWorkspacesExecute_Call{Call: _e.mock.On("WorkspacesListWorkspacesExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesListWorkspacesExecute_Call) Run(run func(r ApiWorkspacesListWorkspacesRequest)) *MockWorkspacesAPI_WorkspacesListWorkspacesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesListWorkspacesRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesListWorkspacesExecute_Call) Return(workspacesGetWorkspace200Responses []WorkspacesGetWorkspace200Response, response *http.Response, err error) *MockWorkspacesAPI_WorkspacesListWorkspacesExecute_Call {
	_c.Call.Return(workspacesGetWorkspace200Responses, response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesListWorkspacesExecute_Call) RunAndReturn(run func(r ApiWorkspacesListWorkspacesRequest) ([]WorkspacesGetWorkspace200Response, *http.Response, error)) *MockWorkspacesAPI_WorkspacesListWorkspacesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesLogs provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesLogs(ctx context.Context, workspaceId float32, stage string, step float32) ApiWorkspacesLogsRequest {
	ret := _mock.Called(ctx, workspaceId, stage, step)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesLogs")
	}

	var r0 ApiWorkspacesLogsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string, float32) ApiWorkspacesLogsRequest); ok {
		r0 = returnFunc(ctx, workspaceId, stage, step)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesLogsRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesLogs'
type MockWorkspacesAPI_WorkspacesLogs_Call struct {
	*mock.Call
}

// WorkspacesLogs is a helper method to define mock.On call
//   - ctx
//   - workspaceId
//   - stage
//   - step
func (_e *MockWorkspacesAPI_Expecter) WorkspacesLogs(ctx interface{}, workspaceId interface{}, stage interface{}, step interface{}) *MockWorkspacesAPI_WorkspacesLogs_Call {
	return &MockWorkspacesAPI_WorkspacesLogs_Call{Call: _e.mock.On("WorkspacesLogs", ctx, workspaceId, stage, step)}
}

func (_c *MockWorkspacesAPI_WorkspacesLogs_Call) Run(run func(ctx context.Context, workspaceId float32, stage string, step float32)) *MockWorkspacesAPI_WorkspacesLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string), args[3].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesLogs_Call) Return(apiWorkspacesLogsRequest ApiWorkspacesLogsRequest) *MockWorkspacesAPI_WorkspacesLogs_Call {
	_c.Call.Return(apiWorkspacesLogsRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesLogs_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32, stage string, step float32) ApiWorkspacesLogsRequest) *MockWorkspacesAPI_WorkspacesLogs_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesLogsExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesLogsExecute(r ApiWorkspacesLogsRequest) (*WorkspacesLogs200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesLogsExecute")
	}

	var r0 *WorkspacesLogs200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesLogsRequest) (*WorkspacesLogs200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesLogsRequest) *WorkspacesLogs200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WorkspacesLogs200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesLogsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiWorkspacesLogsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWorkspacesAPI_WorkspacesLogsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesLogsExecute'
type MockWorkspacesAPI_WorkspacesLogsExecute_Call struct {
	*mock.Call
}

// WorkspacesLogsExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesLogsExecute(r interface{}) *MockWorkspacesAPI_WorkspacesLogsExecute_Call {
	return &MockWorkspacesAPI_WorkspacesLogsExecute_Call{Call: _e.mock.On("WorkspacesLogsExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesLogsExecute_Call) Run(run func(r ApiWorkspacesLogsRequest)) *MockWorkspacesAPI_WorkspacesLogsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesLogsRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesLogsExecute_Call) Return(workspacesLogs200Response *WorkspacesLogs200Response, response *http.Response, err error) *MockWorkspacesAPI_WorkspacesLogsExecute_Call {
	_c.Call.Return(workspacesLogs200Response, response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesLogsExecute_Call) RunAndReturn(run func(r ApiWorkspacesLogsRequest) (*WorkspacesLogs200Response, *http.Response, error)) *MockWorkspacesAPI_WorkspacesLogsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesPipelineStatus provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesPipelineStatus(ctx context.Context, workspaceId float32, stage string) ApiWorkspacesPipelineStatusRequest {
	ret := _mock.Called(ctx, workspaceId, stage)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesPipelineStatus")
	}

	var r0 ApiWorkspacesPipelineStatusRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string) ApiWorkspacesPipelineStatusRequest); ok {
		r0 = returnFunc(ctx, workspaceId, stage)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesPipelineStatusRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesPipelineStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesPipelineStatus'
type MockWorkspacesAPI_WorkspacesPipelineStatus_Call struct {
	*mock.Call
}

// WorkspacesPipelineStatus is a helper method to define mock.On call
//   - ctx
//   - workspaceId
//   - stage
func (_e *MockWorkspacesAPI_Expecter) WorkspacesPipelineStatus(ctx interface{}, workspaceId interface{}, stage interface{}) *MockWorkspacesAPI_WorkspacesPipelineStatus_Call {
	return &MockWorkspacesAPI_WorkspacesPipelineStatus_Call{Call: _e.mock.On("WorkspacesPipelineStatus", ctx, workspaceId, stage)}
}

func (_c *MockWorkspacesAPI_WorkspacesPipelineStatus_Call) Run(run func(ctx context.Context, workspaceId float32, stage string)) *MockWorkspacesAPI_WorkspacesPipelineStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesPipelineStatus_Call) Return(apiWorkspacesPipelineStatusRequest ApiWorkspacesPipelineStatusRequest) *MockWorkspacesAPI_WorkspacesPipelineStatus_Call {
	_c.Call.Return(apiWorkspacesPipelineStatusRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesPipelineStatus_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32, stage string) ApiWorkspacesPipelineStatusRequest) *MockWorkspacesAPI_WorkspacesPipelineStatus_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesPipelineStatusExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesPipelineStatusExecute(r ApiWorkspacesPipelineStatusRequest) ([]WorkspacesPipelineStatus200ResponseInner, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesPipelineStatusExecute")
	}

	var r0 []WorkspacesPipelineStatus200ResponseInner
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesPipelineStatusRequest) ([]WorkspacesPipelineStatus200ResponseInner, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesPipelineStatusRequest) []WorkspacesPipelineStatus200ResponseInner); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]WorkspacesPipelineStatus200ResponseInner)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesPipelineStatusRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiWorkspacesPipelineStatusRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWorkspacesAPI_WorkspacesPipelineStatusExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesPipelineStatusExecute'
type MockWorkspacesAPI_WorkspacesPipelineStatusExecute_Call struct {
	*mock.Call
}

// WorkspacesPipelineStatusExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesPipelineStatusExecute(r interface{}) *MockWorkspacesAPI_WorkspacesPipelineStatusExecute_Call {
	return &MockWorkspacesAPI_WorkspacesPipelineStatusExecute_Call{Call: _e.mock.On("WorkspacesPipelineStatusExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesPipelineStatusExecute_Call) Run(run func(r ApiWorkspacesPipelineStatusRequest)) *MockWorkspacesAPI_WorkspacesPipelineStatusExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesPipelineStatusRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesPipelineStatusExecute_Call) Return(workspacesPipelineStatus200ResponseInners []WorkspacesPipelineStatus200ResponseInner, response *http.Response, err error) *MockWorkspacesAPI_WorkspacesPipelineStatusExecute_Call {
	_c.Call.Return(workspacesPipelineStatus200ResponseInners, response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesPipelineStatusExecute_Call) RunAndReturn(run func(r ApiWorkspacesPipelineStatusRequest) ([]WorkspacesPipelineStatus200ResponseInner, *http.Response, error)) *MockWorkspacesAPI_WorkspacesPipelineStatusExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesReplicaLogs provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesReplicaLogs(ctx context.Context, workspaceId float32, step float32, replica string) ApiWorkspacesReplicaLogsRequest {
	ret := _mock.Called(ctx, workspaceId, step, replica)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesReplicaLogs")
	}

	var r0 ApiWorkspacesReplicaLogsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, float32, string) ApiWorkspacesReplicaLogsRequest); ok {
		r0 = returnFunc(ctx, workspaceId, step, replica)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesReplicaLogsRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesReplicaLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesReplicaLogs'
type MockWorkspacesAPI_WorkspacesReplicaLogs_Call struct {
	*mock.Call
}

// WorkspacesReplicaLogs is a helper method to define mock.On call
//   - ctx
//   - workspaceId
//   - step
//   - replica
func (_e *MockWorkspacesAPI_Expecter) WorkspacesReplicaLogs(ctx interface{}, workspaceId interface{}, step interface{}, replica interface{}) *MockWorkspacesAPI_WorkspacesReplicaLogs_Call {
	return &MockWorkspacesAPI_WorkspacesReplicaLogs_Call{Call: _e.mock.On("WorkspacesReplicaLogs", ctx, workspaceId, step, replica)}
}

func (_c *MockWorkspacesAPI_WorkspacesReplicaLogs_Call) Run(run func(ctx context.Context, workspaceId float32, step float32, replica string)) *MockWorkspacesAPI_WorkspacesReplicaLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(float32), args[3].(string))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesReplicaLogs_Call) Return(apiWorkspacesReplicaLogsRequest ApiWorkspacesReplicaLogsRequest) *MockWorkspacesAPI_WorkspacesReplicaLogs_Call {
	_c.Call.Return(apiWorkspacesReplicaLogsRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesReplicaLogs_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32, step float32, replica string) ApiWorkspacesReplicaLogsRequest) *MockWorkspacesAPI_WorkspacesReplicaLogs_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesReplicaLogsExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesReplicaLogsExecute(r ApiWorkspacesReplicaLogsRequest) (*WorkspacesReplicaLogs200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesReplicaLogsExecute")
	}

	var r0 *WorkspacesReplicaLogs200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesReplicaLogsRequest) (*WorkspacesReplicaLogs200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesReplicaLogsRequest) *WorkspacesReplicaLogs200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WorkspacesReplicaLogs200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesReplicaLogsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiWorkspacesReplicaLogsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWorkspacesAPI_WorkspacesReplicaLogsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesReplicaLogsExecute'
type MockWorkspacesAPI_WorkspacesReplicaLogsExecute_Call struct {
	*mock.Call
}

// WorkspacesReplicaLogsExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesReplicaLogsExecute(r interface{}) *MockWorkspacesAPI_WorkspacesReplicaLogsExecute_Call {
	return &MockWorkspacesAPI_WorkspacesReplicaLogsExecute_Call{Call: _e.mock.On("WorkspacesReplicaLogsExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesReplicaLogsExecute_Call) Run(run func(r ApiWorkspacesReplicaLogsRequest)) *MockWorkspacesAPI_WorkspacesReplicaLogsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesReplicaLogsRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesReplicaLogsExecute_Call) Return(workspacesReplicaLogs200Response *WorkspacesReplicaLogs200Response, response *http.Response, err error) *MockWorkspacesAPI_WorkspacesReplicaLogsExecute_Call {
	_c.Call.Return(workspacesReplicaLogs200Response, response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesReplicaLogsExecute_Call) RunAndReturn(run func(r ApiWorkspacesReplicaLogsRequest) (*WorkspacesReplicaLogs200Response, *http.Response, error)) *MockWorkspacesAPI_WorkspacesReplicaLogsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesServerLogs provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesServerLogs(ctx context.Context, workspaceId float32, step float32, server string) ApiWorkspacesServerLogsRequest {
	ret := _mock.Called(ctx, workspaceId, step, server)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesServerLogs")
	}

	var r0 ApiWorkspacesServerLogsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, float32, string) ApiWorkspacesServerLogsRequest); ok {
		r0 = returnFunc(ctx, workspaceId, step, server)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesServerLogsRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesServerLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesServerLogs'
type MockWorkspacesAPI_WorkspacesServerLogs_Call struct {
	*mock.Call
}

// WorkspacesServerLogs is a helper method to define mock.On call
//   - ctx
//   - workspaceId
//   - step
//   - server
func (_e *MockWorkspacesAPI_Expecter) WorkspacesServerLogs(ctx interface{}, workspaceId interface{}, step interface{}, server interface{}) *MockWorkspacesAPI_WorkspacesServerLogs_Call {
	return &MockWorkspacesAPI_WorkspacesServerLogs_Call{Call: _e.mock.On("WorkspacesServerLogs", ctx, workspaceId, step, server)}
}

func (_c *MockWorkspacesAPI_WorkspacesServerLogs_Call) Run(run func(ctx context.Context, workspaceId float32, step float32, server string)) *MockWorkspacesAPI_WorkspacesServerLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(float32), args[3].(string))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesServerLogs_Call) Return(apiWorkspacesServerLogsRequest ApiWorkspacesServerLogsRequest) *MockWorkspacesAPI_WorkspacesServerLogs_Call {
	_c.Call.Return(apiWorkspacesServerLogsRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesServerLogs_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32, step float32, server string) ApiWorkspacesServerLogsRequest) *MockWorkspacesAPI_WorkspacesServerLogs_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesServerLogsExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesServerLogsExecute(r ApiWorkspacesServerLogsRequest) (*WorkspacesServerLogs200Response, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesServerLogsExecute")
	}

	var r0 *WorkspacesServerLogs200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesServerLogsRequest) (*WorkspacesServerLogs200Response, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesServerLogsRequest) *WorkspacesServerLogs200Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WorkspacesServerLogs200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesServerLogsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(ApiWorkspacesServerLogsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWorkspacesAPI_WorkspacesServerLogsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesServerLogsExecute'
type MockWorkspacesAPI_WorkspacesServerLogsExecute_Call struct {
	*mock.Call
}

// WorkspacesServerLogsExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesServerLogsExecute(r interface{}) *MockWorkspacesAPI_WorkspacesServerLogsExecute_Call {
	return &MockWorkspacesAPI_WorkspacesServerLogsExecute_Call{Call: _e.mock.On("WorkspacesServerLogsExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesServerLogsExecute_Call) Run(run func(r ApiWorkspacesServerLogsRequest)) *MockWorkspacesAPI_WorkspacesServerLogsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesServerLogsRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesServerLogsExecute_Call) Return(workspacesServerLogs200Response *WorkspacesServerLogs200Response, response *http.Response, err error) *MockWorkspacesAPI_WorkspacesServerLogsExecute_Call {
	_c.Call.Return(workspacesServerLogs200Response, response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesServerLogsExecute_Call) RunAndReturn(run func(r ApiWorkspacesServerLogsRequest) (*WorkspacesServerLogs200Response, *http.Response, error)) *MockWorkspacesAPI_WorkspacesServerLogsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesSetEnvVar provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesSetEnvVar(ctx context.Context, workspaceId float32) ApiWorkspacesSetEnvVarRequest {
	ret := _mock.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesSetEnvVar")
	}

	var r0 ApiWorkspacesSetEnvVarRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesSetEnvVarRequest); ok {
		r0 = returnFunc(ctx, workspaceId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesSetEnvVarRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesSetEnvVar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesSetEnvVar'
type MockWorkspacesAPI_WorkspacesSetEnvVar_Call struct {
	*mock.Call
}

// WorkspacesSetEnvVar is a helper method to define mock.On call
//   - ctx
//   - workspaceId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesSetEnvVar(ctx interface{}, workspaceId interface{}) *MockWorkspacesAPI_WorkspacesSetEnvVar_Call {
	return &MockWorkspacesAPI_WorkspacesSetEnvVar_Call{Call: _e.mock.On("WorkspacesSetEnvVar", ctx, workspaceId)}
}

func (_c *MockWorkspacesAPI_WorkspacesSetEnvVar_Call) Run(run func(ctx context.Context, workspaceId float32)) *MockWorkspacesAPI_WorkspacesSetEnvVar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesSetEnvVar_Call) Return(apiWorkspacesSetEnvVarRequest ApiWorkspacesSetEnvVarRequest) *MockWorkspacesAPI_WorkspacesSetEnvVar_Call {
	_c.Call.Return(apiWorkspacesSetEnvVarRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesSetEnvVar_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32) ApiWorkspacesSetEnvVarRequest) *MockWorkspacesAPI_WorkspacesSetEnvVar_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesSetEnvVarExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesSetEnvVarExecute(r ApiWorkspacesSetEnvVarRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesSetEnvVarExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesSetEnvVarRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesSetEnvVarRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesSetEnvVarRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesSetEnvVarExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesSetEnvVarExecute'
type MockWorkspacesAPI_WorkspacesSetEnvVarExecute_Call struct {
	*mock.Call
}

// WorkspacesSetEnvVarExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesSetEnvVarExecute(r interface{}) *MockWorkspacesAPI_WorkspacesSetEnvVarExecute_Call {
	return &MockWorkspacesAPI_WorkspacesSetEnvVarExecute_Call{Call: _e.mock.On("WorkspacesSetEnvVarExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesSetEnvVarExecute_Call) Run(run func(r ApiWorkspacesSetEnvVarRequest)) *MockWorkspacesAPI_WorkspacesSetEnvVarExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesSetEnvVarRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesSetEnvVarExecute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesSetEnvVarExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesSetEnvVarExecute_Call) RunAndReturn(run func(r ApiWorkspacesSetEnvVarRequest) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesSetEnvVarExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesStartPipelineStage provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesStartPipelineStage(ctx context.Context, workspaceId float32, stage string) ApiWorkspacesStartPipelineStageRequest {
	ret := _mock.Called(ctx, workspaceId, stage)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesStartPipelineStage")
	}

	var r0 ApiWorkspacesStartPipelineStageRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string) ApiWorkspacesStartPipelineStageRequest); ok {
		r0 = returnFunc(ctx, workspaceId, stage)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesStartPipelineStageRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesStartPipelineStage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesStartPipelineStage'
type MockWorkspacesAPI_WorkspacesStartPipelineStage_Call struct {
	*mock.Call
}

// WorkspacesStartPipelineStage is a helper method to define mock.On call
//   - ctx
//   - workspaceId
//   - stage
func (_e *MockWorkspacesAPI_Expecter) WorkspacesStartPipelineStage(ctx interface{}, workspaceId interface{}, stage interface{}) *MockWorkspacesAPI_WorkspacesStartPipelineStage_Call {
	return &MockWorkspacesAPI_WorkspacesStartPipelineStage_Call{Call: _e.mock.On("WorkspacesStartPipelineStage", ctx, workspaceId, stage)}
}

func (_c *MockWorkspacesAPI_WorkspacesStartPipelineStage_Call) Run(run func(ctx context.Context, workspaceId float32, stage string)) *MockWorkspacesAPI_WorkspacesStartPipelineStage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesStartPipelineStage_Call) Return(apiWorkspacesStartPipelineStageRequest ApiWorkspacesStartPipelineStageRequest) *MockWorkspacesAPI_WorkspacesStartPipelineStage_Call {
	_c.Call.Return(apiWorkspacesStartPipelineStageRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesStartPipelineStage_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32, stage string) ApiWorkspacesStartPipelineStageRequest) *MockWorkspacesAPI_WorkspacesStartPipelineStage_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesStartPipelineStage1 provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesStartPipelineStage1(ctx context.Context, workspaceId float32, stage string, profile string) ApiWorkspacesStartPipelineStage1Request {
	ret := _mock.Called(ctx, workspaceId, stage, profile)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesStartPipelineStage1")
	}

	var r0 ApiWorkspacesStartPipelineStage1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string, string) ApiWorkspacesStartPipelineStage1Request); ok {
		r0 = returnFunc(ctx, workspaceId, stage, profile)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesStartPipelineStage1Request)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesStartPipelineStage1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesStartPipelineStage1'
type MockWorkspacesAPI_WorkspacesStartPipelineStage1_Call struct {
	*mock.Call
}

// WorkspacesStartPipelineStage1 is a helper method to define mock.On call
//   - ctx
//   - workspaceId
//   - stage
//   - profile
func (_e *MockWorkspacesAPI_Expecter) WorkspacesStartPipelineStage1(ctx interface{}, workspaceId interface{}, stage interface{}, profile interface{}) *MockWorkspacesAPI_WorkspacesStartPipelineStage1_Call {
	return &MockWorkspacesAPI_WorkspacesStartPipelineStage1_Call{Call: _e.mock.On("WorkspacesStartPipelineStage1", ctx, workspaceId, stage, profile)}
}

func (_c *MockWorkspacesAPI_WorkspacesStartPipelineStage1_Call) Run(run func(ctx context.Context, workspaceId float32, stage string, profile string)) *MockWorkspacesAPI_WorkspacesStartPipelineStage1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesStartPipelineStage1_Call) Return(apiWorkspacesStartPipelineStage1Request ApiWorkspacesStartPipelineStage1Request) *MockWorkspacesAPI_WorkspacesStartPipelineStage1_Call {
	_c.Call.Return(apiWorkspacesStartPipelineStage1Request)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesStartPipelineStage1_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32, stage string, profile string) ApiWorkspacesStartPipelineStage1Request) *MockWorkspacesAPI_WorkspacesStartPipelineStage1_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesStartPipelineStage1Execute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesStartPipelineStage1Execute(r ApiWorkspacesStartPipelineStage1Request) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesStartPipelineStage1Execute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesStartPipelineStage1Request) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesStartPipelineStage1Request) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesStartPipelineStage1Request) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesStartPipelineStage1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesStartPipelineStage1Execute'
type MockWorkspacesAPI_WorkspacesStartPipelineStage1Execute_Call struct {
	*mock.Call
}

// WorkspacesStartPipelineStage1Execute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesStartPipelineStage1Execute(r interface{}) *MockWorkspacesAPI_WorkspacesStartPipelineStage1Execute_Call {
	return &MockWorkspacesAPI_WorkspacesStartPipelineStage1Execute_Call{Call: _e.mock.On("WorkspacesStartPipelineStage1Execute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesStartPipelineStage1Execute_Call) Run(run func(r ApiWorkspacesStartPipelineStage1Request)) *MockWorkspacesAPI_WorkspacesStartPipelineStage1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesStartPipelineStage1Request))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesStartPipelineStage1Execute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesStartPipelineStage1Execute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesStartPipelineStage1Execute_Call) RunAndReturn(run func(r ApiWorkspacesStartPipelineStage1Request) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesStartPipelineStage1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesStartPipelineStageExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesStartPipelineStageExecute(r ApiWorkspacesStartPipelineStageRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesStartPipelineStageExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesStartPipelineStageRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesStartPipelineStageRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesStartPipelineStageRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesStartPipelineStageExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesStartPipelineStageExecute'
type MockWorkspacesAPI_WorkspacesStartPipelineStageExecute_Call struct {
	*mock.Call
}

// WorkspacesStartPipelineStageExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesStartPipelineStageExecute(r interface{}) *MockWorkspacesAPI_WorkspacesStartPipelineStageExecute_Call {
	return &MockWorkspacesAPI_WorkspacesStartPipelineStageExecute_Call{Call: _e.mock.On("WorkspacesStartPipelineStageExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesStartPipelineStageExecute_Call) Run(run func(r ApiWorkspacesStartPipelineStageRequest)) *MockWorkspacesAPI_WorkspacesStartPipelineStageExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesStartPipelineStageRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesStartPipelineStageExecute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesStartPipelineStageExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesStartPipelineStageExecute_Call) RunAndReturn(run func(r ApiWorkspacesStartPipelineStageRequest) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesStartPipelineStageExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesStopPipelineStage provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesStopPipelineStage(ctx context.Context, workspaceId float32, stage string) ApiWorkspacesStopPipelineStageRequest {
	ret := _mock.Called(ctx, workspaceId, stage)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesStopPipelineStage")
	}

	var r0 ApiWorkspacesStopPipelineStageRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32, string) ApiWorkspacesStopPipelineStageRequest); ok {
		r0 = returnFunc(ctx, workspaceId, stage)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesStopPipelineStageRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesStopPipelineStage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesStopPipelineStage'
type MockWorkspacesAPI_WorkspacesStopPipelineStage_Call struct {
	*mock.Call
}

// WorkspacesStopPipelineStage is a helper method to define mock.On call
//   - ctx
//   - workspaceId
//   - stage
func (_e *MockWorkspacesAPI_Expecter) WorkspacesStopPipelineStage(ctx interface{}, workspaceId interface{}, stage interface{}) *MockWorkspacesAPI_WorkspacesStopPipelineStage_Call {
	return &MockWorkspacesAPI_WorkspacesStopPipelineStage_Call{Call: _e.mock.On("WorkspacesStopPipelineStage", ctx, workspaceId, stage)}
}

func (_c *MockWorkspacesAPI_WorkspacesStopPipelineStage_Call) Run(run func(ctx context.Context, workspaceId float32, stage string)) *MockWorkspacesAPI_WorkspacesStopPipelineStage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32), args[2].(string))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesStopPipelineStage_Call) Return(apiWorkspacesStopPipelineStageRequest ApiWorkspacesStopPipelineStageRequest) *MockWorkspacesAPI_WorkspacesStopPipelineStage_Call {
	_c.Call.Return(apiWorkspacesStopPipelineStageRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesStopPipelineStage_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32, stage string) ApiWorkspacesStopPipelineStageRequest) *MockWorkspacesAPI_WorkspacesStopPipelineStage_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesStopPipelineStageExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesStopPipelineStageExecute(r ApiWorkspacesStopPipelineStageRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesStopPipelineStageExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesStopPipelineStageRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesStopPipelineStageRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesStopPipelineStageRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesStopPipelineStageExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesStopPipelineStageExecute'
type MockWorkspacesAPI_WorkspacesStopPipelineStageExecute_Call struct {
	*mock.Call
}

// WorkspacesStopPipelineStageExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesStopPipelineStageExecute(r interface{}) *MockWorkspacesAPI_WorkspacesStopPipelineStageExecute_Call {
	return &MockWorkspacesAPI_WorkspacesStopPipelineStageExecute_Call{Call: _e.mock.On("WorkspacesStopPipelineStageExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesStopPipelineStageExecute_Call) Run(run func(r ApiWorkspacesStopPipelineStageRequest)) *MockWorkspacesAPI_WorkspacesStopPipelineStageExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesStopPipelineStageRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesStopPipelineStageExecute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesStopPipelineStageExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesStopPipelineStageExecute_Call) RunAndReturn(run func(r ApiWorkspacesStopPipelineStageRequest) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesStopPipelineStageExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesTeardownLandscape provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesTeardownLandscape(ctx context.Context, workspaceId float32) ApiWorkspacesTeardownLandscapeRequest {
	ret := _mock.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesTeardownLandscape")
	}

	var r0 ApiWorkspacesTeardownLandscapeRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesTeardownLandscapeRequest); ok {
		r0 = returnFunc(ctx, workspaceId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesTeardownLandscapeRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesTeardownLandscape_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesTeardownLandscape'
type MockWorkspacesAPI_WorkspacesTeardownLandscape_Call struct {
	*mock.Call
}

// WorkspacesTeardownLandscape is a helper method to define mock.On call
//   - ctx
//   - workspaceId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesTeardownLandscape(ctx interface{}, workspaceId interface{}) *MockWorkspacesAPI_WorkspacesTeardownLandscape_Call {
	return &MockWorkspacesAPI_WorkspacesTeardownLandscape_Call{Call: _e.mock.On("WorkspacesTeardownLandscape", ctx, workspaceId)}
}

func (_c *MockWorkspacesAPI_WorkspacesTeardownLandscape_Call) Run(run func(ctx context.Context, workspaceId float32)) *MockWorkspacesAPI_WorkspacesTeardownLandscape_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesTeardownLandscape_Call) Return(apiWorkspacesTeardownLandscapeRequest ApiWorkspacesTeardownLandscapeRequest) *MockWorkspacesAPI_WorkspacesTeardownLandscape_Call {
	_c.Call.Return(apiWorkspacesTeardownLandscapeRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesTeardownLandscape_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32) ApiWorkspacesTeardownLandscapeRequest) *MockWorkspacesAPI_WorkspacesTeardownLandscape_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesTeardownLandscapeExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesTeardownLandscapeExecute(r ApiWorkspacesTeardownLandscapeRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesTeardownLandscapeExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesTeardownLandscapeRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesTeardownLandscapeRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesTeardownLandscapeRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesTeardownLandscapeExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesTeardownLandscapeExecute'
type MockWorkspacesAPI_WorkspacesTeardownLandscapeExecute_Call struct {
	*mock.Call
}

// WorkspacesTeardownLandscapeExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesTeardownLandscapeExecute(r interface{}) *MockWorkspacesAPI_WorkspacesTeardownLandscapeExecute_Call {
	return &MockWorkspacesAPI_WorkspacesTeardownLandscapeExecute_Call{Call: _e.mock.On("WorkspacesTeardownLandscapeExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesTeardownLandscapeExecute_Call) Run(run func(r ApiWorkspacesTeardownLandscapeRequest)) *MockWorkspacesAPI_WorkspacesTeardownLandscapeExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesTeardownLandscapeRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesTeardownLandscapeExecute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesTeardownLandscapeExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesTeardownLandscapeExecute_Call) RunAndReturn(run func(r ApiWorkspacesTeardownLandscapeRequest) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesTeardownLandscapeExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesUpdateWorkspace provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesUpdateWorkspace(ctx context.Context, workspaceId float32) ApiWorkspacesUpdateWorkspaceRequest {
	ret := _mock.Called(ctx, workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesUpdateWorkspace")
	}

	var r0 ApiWorkspacesUpdateWorkspaceRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) ApiWorkspacesUpdateWorkspaceRequest); ok {
		r0 = returnFunc(ctx, workspaceId)
	} else {
		r0 = ret.Get(0).(ApiWorkspacesUpdateWorkspaceRequest)
	}
	return r0
}

// MockWorkspacesAPI_WorkspacesUpdateWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesUpdateWorkspace'
type MockWorkspacesAPI_WorkspacesUpdateWorkspace_Call struct {
	*mock.Call
}

// WorkspacesUpdateWorkspace is a helper method to define mock.On call
//   - ctx
//   - workspaceId
func (_e *MockWorkspacesAPI_Expecter) WorkspacesUpdateWorkspace(ctx interface{}, workspaceId interface{}) *MockWorkspacesAPI_WorkspacesUpdateWorkspace_Call {
	return &MockWorkspacesAPI_WorkspacesUpdateWorkspace_Call{Call: _e.mock.On("WorkspacesUpdateWorkspace", ctx, workspaceId)}
}

func (_c *MockWorkspacesAPI_WorkspacesUpdateWorkspace_Call) Run(run func(ctx context.Context, workspaceId float32)) *MockWorkspacesAPI_WorkspacesUpdateWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesUpdateWorkspace_Call) Return(apiWorkspacesUpdateWorkspaceRequest ApiWorkspacesUpdateWorkspaceRequest) *MockWorkspacesAPI_WorkspacesUpdateWorkspace_Call {
	_c.Call.Return(apiWorkspacesUpdateWorkspaceRequest)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesUpdateWorkspace_Call) RunAndReturn(run func(ctx context.Context, workspaceId float32) ApiWorkspacesUpdateWorkspaceRequest) *MockWorkspacesAPI_WorkspacesUpdateWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesUpdateWorkspaceExecute provides a mock function for the type MockWorkspacesAPI
func (_mock *MockWorkspacesAPI) WorkspacesUpdateWorkspaceExecute(r ApiWorkspacesUpdateWorkspaceRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesUpdateWorkspaceExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesUpdateWorkspaceRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(ApiWorkspacesUpdateWorkspaceRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ApiWorkspacesUpdateWorkspaceRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspacesAPI_WorkspacesUpdateWorkspaceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesUpdateWorkspaceExecute'
type MockWorkspacesAPI_WorkspacesUpdateWorkspaceExecute_Call struct {
	*mock.Call
}

// WorkspacesUpdateWorkspaceExecute is a helper method to define mock.On call
//   - r
func (_e *MockWorkspacesAPI_Expecter) WorkspacesUpdateWorkspaceExecute(r interface{}) *MockWorkspacesAPI_WorkspacesUpdateWorkspaceExecute_Call {
	return &MockWorkspacesAPI_WorkspacesUpdateWorkspaceExecute_Call{Call: _e.mock.On("WorkspacesUpdateWorkspaceExecute", r)}
}

func (_c *MockWorkspacesAPI_WorkspacesUpdateWorkspaceExecute_Call) Run(run func(r ApiWorkspacesUpdateWorkspaceRequest)) *MockWorkspacesAPI_WorkspacesUpdateWorkspaceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiWorkspacesUpdateWorkspaceRequest))
	})
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesUpdateWorkspaceExecute_Call) Return(response *http.Response, err error) *MockWorkspacesAPI_WorkspacesUpdateWorkspaceExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWorkspacesAPI_WorkspacesUpdateWorkspaceExecute_Call) RunAndReturn(run func(r ApiWorkspacesUpdateWorkspaceRequest) (*http.Response, error)) *MockWorkspacesAPI_WorkspacesUpdateWorkspaceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMappedNullable creates a new instance of MockMappedNullable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMappedNullable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMappedNullable {
	mock := &MockMappedNullable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMappedNullable is an autogenerated mock type for the MappedNullable type
type MockMappedNullable struct {
	mock.Mock
}

type MockMappedNullable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMappedNullable) EXPECT() *MockMappedNullable_Expecter {
	return &MockMappedNullable_Expecter{mock: &_m.Mock}
}

// ToMap provides a mock function for the type MockMappedNullable
func (_mock *MockMappedNullable) ToMap() (map[string]interface{}, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToMap")
	}

	var r0 map[string]interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (map[string]interface{}, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMappedNullable_ToMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToMap'
type MockMappedNullable_ToMap_Call struct {
	*mock.Call
}

// ToMap is a helper method to define mock.On call
func (_e *MockMappedNullable_Expecter) ToMap() *MockMappedNullable_ToMap_Call {
	return &MockMappedNullable_ToMap_Call{Call: _e.mock.On("ToMap")}
}

func (_c *MockMappedNullable_ToMap_Call) Run(run func()) *MockMappedNullable_ToMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMappedNullable_ToMap_Call) Return(stringToIfaceVal map[string]interface{}, err error) *MockMappedNullable_ToMap_Call {
	_c.Call.Return(stringToIfaceVal, err)
	return _c
}

func (_c *MockMappedNullable_ToMap_Call) RunAndReturn(run func() (map[string]interface{}, error)) *MockMappedNullable_ToMap_Call {
	_c.Call.Return(run)
	return _c
}
