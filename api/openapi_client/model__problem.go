// Copyright (c) Codesphere Inc.
// SPDX-License-Identifier: Apache-2.0

/*
Codesphere Public API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Problem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Problem{}

// Problem An SSE event of type problem. Data contains a JSON object with given properties.
type Problem struct {
	Data  ProblemData `json:"data"`
	Event string      `json:"event"`
}

type _Problem Problem

// NewProblem instantiates a new Problem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblem(data ProblemData, event string) *Problem {
	this := Problem{}
	this.Data = data
	this.Event = event
	return &this
}

// NewProblemWithDefaults instantiates a new Problem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemWithDefaults() *Problem {
	this := Problem{}
	return &this
}

// GetData returns the Data field value
func (o *Problem) GetData() ProblemData {
	if o == nil {
		var ret ProblemData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Problem) GetDataOk() (*ProblemData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *Problem) SetData(v ProblemData) {
	o.Data = v
}

// GetEvent returns the Event field value
func (o *Problem) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *Problem) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *Problem) SetEvent(v string) {
	o.Event = v
}

func (o Problem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Problem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["event"] = o.Event
	return toSerialize, nil
}

func (o *Problem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"event",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProblem := _Problem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProblem)

	if err != nil {
		return err
	}

	*o = Problem(varProblem)

	return err
}

type NullableProblem struct {
	value *Problem
	isSet bool
}

func (v NullableProblem) Get() *Problem {
	return v.value
}

func (v *NullableProblem) Set(val *Problem) {
	v.value = val
	v.isSet = true
}

func (v NullableProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblem(val *Problem) *NullableProblem {
	return &NullableProblem{value: val, isSet: true}
}

func (v NullableProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
