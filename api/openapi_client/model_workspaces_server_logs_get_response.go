// Copyright (c) Codesphere Inc.
// SPDX-License-Identifier: Apache-2.0

/*
Codesphere Public API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WorkspacesServerLogsGetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkspacesServerLogsGetResponse{}

// WorkspacesServerLogsGetResponse An SSE event of type data. Data contains a JSON object with given properties.
type WorkspacesServerLogsGetResponse struct {
	Data  []WorkspacesLogsGetResponseDataInner `json:"data"`
	Event string                               `json:"event"`
}

type _WorkspacesServerLogsGetResponse WorkspacesServerLogsGetResponse

// NewWorkspacesServerLogsGetResponse instantiates a new WorkspacesServerLogsGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkspacesServerLogsGetResponse(data []WorkspacesLogsGetResponseDataInner, event string) *WorkspacesServerLogsGetResponse {
	this := WorkspacesServerLogsGetResponse{}
	this.Data = data
	this.Event = event
	return &this
}

// NewWorkspacesServerLogsGetResponseWithDefaults instantiates a new WorkspacesServerLogsGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkspacesServerLogsGetResponseWithDefaults() *WorkspacesServerLogsGetResponse {
	this := WorkspacesServerLogsGetResponse{}
	return &this
}

// GetData returns the Data field value
func (o *WorkspacesServerLogsGetResponse) GetData() []WorkspacesLogsGetResponseDataInner {
	if o == nil {
		var ret []WorkspacesLogsGetResponseDataInner
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *WorkspacesServerLogsGetResponse) GetDataOk() ([]WorkspacesLogsGetResponseDataInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *WorkspacesServerLogsGetResponse) SetData(v []WorkspacesLogsGetResponseDataInner) {
	o.Data = v
}

// GetEvent returns the Event field value
func (o *WorkspacesServerLogsGetResponse) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *WorkspacesServerLogsGetResponse) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *WorkspacesServerLogsGetResponse) SetEvent(v string) {
	o.Event = v
}

func (o WorkspacesServerLogsGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkspacesServerLogsGetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["event"] = o.Event
	return toSerialize, nil
}

func (o *WorkspacesServerLogsGetResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"event",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkspacesServerLogsGetResponse := _WorkspacesServerLogsGetResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkspacesServerLogsGetResponse)

	if err != nil {
		return err
	}

	*o = WorkspacesServerLogsGetResponse(varWorkspacesServerLogsGetResponse)

	return err
}

type NullableWorkspacesServerLogsGetResponse struct {
	value *WorkspacesServerLogsGetResponse
	isSet bool
}

func (v NullableWorkspacesServerLogsGetResponse) Get() *WorkspacesServerLogsGetResponse {
	return v.value
}

func (v *NullableWorkspacesServerLogsGetResponse) Set(val *WorkspacesServerLogsGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspacesServerLogsGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspacesServerLogsGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspacesServerLogsGetResponse(val *WorkspacesServerLogsGetResponse) *NullableWorkspacesServerLogsGetResponse {
	return &NullableWorkspacesServerLogsGetResponse{value: val, isSet: true}
}

func (v NullableWorkspacesServerLogsGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspacesServerLogsGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
