// Copyright (c) Codesphere Inc.
// SPDX-License-Identifier: Apache-2.0

/*
Codesphere Public API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DomainsGetDomain200ResponseCertificateRequestStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainsGetDomain200ResponseCertificateRequestStatus{}

// DomainsGetDomain200ResponseCertificateRequestStatus struct for DomainsGetDomain200ResponseCertificateRequestStatus
type DomainsGetDomain200ResponseCertificateRequestStatus struct {
	Issued bool           `json:"issued"`
	Reason NullableString `json:"reason"`
}

type _DomainsGetDomain200ResponseCertificateRequestStatus DomainsGetDomain200ResponseCertificateRequestStatus

// NewDomainsGetDomain200ResponseCertificateRequestStatus instantiates a new DomainsGetDomain200ResponseCertificateRequestStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainsGetDomain200ResponseCertificateRequestStatus(issued bool, reason NullableString) *DomainsGetDomain200ResponseCertificateRequestStatus {
	this := DomainsGetDomain200ResponseCertificateRequestStatus{}
	this.Issued = issued
	this.Reason = reason
	return &this
}

// NewDomainsGetDomain200ResponseCertificateRequestStatusWithDefaults instantiates a new DomainsGetDomain200ResponseCertificateRequestStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainsGetDomain200ResponseCertificateRequestStatusWithDefaults() *DomainsGetDomain200ResponseCertificateRequestStatus {
	this := DomainsGetDomain200ResponseCertificateRequestStatus{}
	return &this
}

// GetIssued returns the Issued field value
func (o *DomainsGetDomain200ResponseCertificateRequestStatus) GetIssued() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Issued
}

// GetIssuedOk returns a tuple with the Issued field value
// and a boolean to check if the value has been set.
func (o *DomainsGetDomain200ResponseCertificateRequestStatus) GetIssuedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issued, true
}

// SetIssued sets field value
func (o *DomainsGetDomain200ResponseCertificateRequestStatus) SetIssued(v bool) {
	o.Issued = v
}

// GetReason returns the Reason field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DomainsGetDomain200ResponseCertificateRequestStatus) GetReason() string {
	if o == nil || o.Reason.Get() == nil {
		var ret string
		return ret
	}

	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DomainsGetDomain200ResponseCertificateRequestStatus) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// SetReason sets field value
func (o *DomainsGetDomain200ResponseCertificateRequestStatus) SetReason(v string) {
	o.Reason.Set(&v)
}

func (o DomainsGetDomain200ResponseCertificateRequestStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainsGetDomain200ResponseCertificateRequestStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["issued"] = o.Issued
	toSerialize["reason"] = o.Reason.Get()
	return toSerialize, nil
}

func (o *DomainsGetDomain200ResponseCertificateRequestStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"issued",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDomainsGetDomain200ResponseCertificateRequestStatus := _DomainsGetDomain200ResponseCertificateRequestStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDomainsGetDomain200ResponseCertificateRequestStatus)

	if err != nil {
		return err
	}

	*o = DomainsGetDomain200ResponseCertificateRequestStatus(varDomainsGetDomain200ResponseCertificateRequestStatus)

	return err
}

type NullableDomainsGetDomain200ResponseCertificateRequestStatus struct {
	value *DomainsGetDomain200ResponseCertificateRequestStatus
	isSet bool
}

func (v NullableDomainsGetDomain200ResponseCertificateRequestStatus) Get() *DomainsGetDomain200ResponseCertificateRequestStatus {
	return v.value
}

func (v *NullableDomainsGetDomain200ResponseCertificateRequestStatus) Set(val *DomainsGetDomain200ResponseCertificateRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainsGetDomain200ResponseCertificateRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainsGetDomain200ResponseCertificateRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainsGetDomain200ResponseCertificateRequestStatus(val *DomainsGetDomain200ResponseCertificateRequestStatus) *NullableDomainsGetDomain200ResponseCertificateRequestStatus {
	return &NullableDomainsGetDomain200ResponseCertificateRequestStatus{value: val, isSet: true}
}

func (v NullableDomainsGetDomain200ResponseCertificateRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainsGetDomain200ResponseCertificateRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
