// Copyright (c) Codesphere Inc.
// SPDX-License-Identifier: Apache-2.0

/*
Codesphere Public API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// WorkspacesServerLogs200Response - SSE stream with two event types: \"data\" and \"problem\". Both event data contain JSON objects in the form described by their schemas. Possible problem statuses and reasons:400: Workspace is not running, path or request body variable does not match schema. 401: Authorization information is missing or invalid. 404: Workspace is not found.
type WorkspacesServerLogs200Response struct {
	Problem                         *Problem
	WorkspacesServerLogsGetResponse *WorkspacesServerLogsGetResponse
}

// ProblemAsWorkspacesServerLogs200Response is a convenience function that returns Problem wrapped in WorkspacesServerLogs200Response
func ProblemAsWorkspacesServerLogs200Response(v *Problem) WorkspacesServerLogs200Response {
	return WorkspacesServerLogs200Response{
		Problem: v,
	}
}

// WorkspacesServerLogsGetResponseAsWorkspacesServerLogs200Response is a convenience function that returns WorkspacesServerLogsGetResponse wrapped in WorkspacesServerLogs200Response
func WorkspacesServerLogsGetResponseAsWorkspacesServerLogs200Response(v *WorkspacesServerLogsGetResponse) WorkspacesServerLogs200Response {
	return WorkspacesServerLogs200Response{
		WorkspacesServerLogsGetResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *WorkspacesServerLogs200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Problem
	err = newStrictDecoder(data).Decode(&dst.Problem)
	if err == nil {
		jsonProblem, _ := json.Marshal(dst.Problem)
		if string(jsonProblem) == "{}" { // empty struct
			dst.Problem = nil
		} else {
			if err = validator.Validate(dst.Problem); err != nil {
				dst.Problem = nil
			} else {
				match++
			}
		}
	} else {
		dst.Problem = nil
	}

	// try to unmarshal data into WorkspacesServerLogsGetResponse
	err = newStrictDecoder(data).Decode(&dst.WorkspacesServerLogsGetResponse)
	if err == nil {
		jsonWorkspacesServerLogsGetResponse, _ := json.Marshal(dst.WorkspacesServerLogsGetResponse)
		if string(jsonWorkspacesServerLogsGetResponse) == "{}" { // empty struct
			dst.WorkspacesServerLogsGetResponse = nil
		} else {
			if err = validator.Validate(dst.WorkspacesServerLogsGetResponse); err != nil {
				dst.WorkspacesServerLogsGetResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.WorkspacesServerLogsGetResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Problem = nil
		dst.WorkspacesServerLogsGetResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WorkspacesServerLogs200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WorkspacesServerLogs200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WorkspacesServerLogs200Response) MarshalJSON() ([]byte, error) {
	if src.Problem != nil {
		return json.Marshal(&src.Problem)
	}

	if src.WorkspacesServerLogsGetResponse != nil {
		return json.Marshal(&src.WorkspacesServerLogsGetResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WorkspacesServerLogs200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Problem != nil {
		return obj.Problem
	}

	if obj.WorkspacesServerLogsGetResponse != nil {
		return obj.WorkspacesServerLogsGetResponse
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj WorkspacesServerLogs200Response) GetActualInstanceValue() interface{} {
	if obj.Problem != nil {
		return *obj.Problem
	}

	if obj.WorkspacesServerLogsGetResponse != nil {
		return *obj.WorkspacesServerLogsGetResponse
	}

	// all schemas are nil
	return nil
}

type NullableWorkspacesServerLogs200Response struct {
	value *WorkspacesServerLogs200Response
	isSet bool
}

func (v NullableWorkspacesServerLogs200Response) Get() *WorkspacesServerLogs200Response {
	return v.value
}

func (v *NullableWorkspacesServerLogs200Response) Set(val *WorkspacesServerLogs200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspacesServerLogs200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspacesServerLogs200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspacesServerLogs200Response(val *WorkspacesServerLogs200Response) *NullableWorkspacesServerLogs200Response {
	return &NullableWorkspacesServerLogs200Response{value: val, isSet: true}
}

func (v NullableWorkspacesServerLogs200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspacesServerLogs200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
