// Copyright (c) Codesphere Inc.
// SPDX-License-Identifier: Apache-2.0

/*
Codesphere Public API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TeamsCreateTeamRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamsCreateTeamRequest{}

// TeamsCreateTeamRequest struct for TeamsCreateTeamRequest
type TeamsCreateTeamRequest struct {
	Name string `json:"name"`
	Dc   int    `json:"dc"`
}

type _TeamsCreateTeamRequest TeamsCreateTeamRequest

// NewTeamsCreateTeamRequest instantiates a new TeamsCreateTeamRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamsCreateTeamRequest(name string, dc int) *TeamsCreateTeamRequest {
	this := TeamsCreateTeamRequest{}
	this.Name = name
	this.Dc = dc
	return &this
}

// NewTeamsCreateTeamRequestWithDefaults instantiates a new TeamsCreateTeamRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamsCreateTeamRequestWithDefaults() *TeamsCreateTeamRequest {
	this := TeamsCreateTeamRequest{}
	return &this
}

// GetName returns the Name field value
func (o *TeamsCreateTeamRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TeamsCreateTeamRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TeamsCreateTeamRequest) SetName(v string) {
	o.Name = v
}

// GetDc returns the Dc field value
func (o *TeamsCreateTeamRequest) GetDc() int {
	if o == nil {
		var ret int
		return ret
	}

	return o.Dc
}

// GetDcOk returns a tuple with the Dc field value
// and a boolean to check if the value has been set.
func (o *TeamsCreateTeamRequest) GetDcOk() (*int, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dc, true
}

// SetDc sets field value
func (o *TeamsCreateTeamRequest) SetDc(v int) {
	o.Dc = v
}

func (o TeamsCreateTeamRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamsCreateTeamRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["dc"] = o.Dc
	return toSerialize, nil
}

func (o *TeamsCreateTeamRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"dc",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamsCreateTeamRequest := _TeamsCreateTeamRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTeamsCreateTeamRequest)

	if err != nil {
		return err
	}

	*o = TeamsCreateTeamRequest(varTeamsCreateTeamRequest)

	return err
}

type NullableTeamsCreateTeamRequest struct {
	value *TeamsCreateTeamRequest
	isSet bool
}

func (v NullableTeamsCreateTeamRequest) Get() *TeamsCreateTeamRequest {
	return v.value
}

func (v *NullableTeamsCreateTeamRequest) Set(val *TeamsCreateTeamRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamsCreateTeamRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamsCreateTeamRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamsCreateTeamRequest(val *TeamsCreateTeamRequest) *NullableTeamsCreateTeamRequest {
	return &NullableTeamsCreateTeamRequest{value: val, isSet: true}
}

func (v NullableTeamsCreateTeamRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamsCreateTeamRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
