// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package api

import (
	mock "github.com/stretchr/testify/mock"
	"time"
)

// NewMockTime creates a new instance of MockTime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTime(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTime {
	mock := &MockTime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTime is an autogenerated mock type for the Time type
type MockTime struct {
	mock.Mock
}

type MockTime_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTime) EXPECT() *MockTime_Expecter {
	return &MockTime_Expecter{mock: &_m.Mock}
}

// Now provides a mock function for the type MockTime
func (_mock *MockTime) Now() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// MockTime_Now_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Now'
type MockTime_Now_Call struct {
	*mock.Call
}

// Now is a helper method to define mock.On call
func (_e *MockTime_Expecter) Now() *MockTime_Now_Call {
	return &MockTime_Now_Call{Call: _e.mock.On("Now")}
}

func (_c *MockTime_Now_Call) Run(run func()) *MockTime_Now_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTime_Now_Call) Return(time1 time.Time) *MockTime_Now_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *MockTime_Now_Call) RunAndReturn(run func() time.Time) *MockTime_Now_Call {
	_c.Call.Return(run)
	return _c
}

// Sleep provides a mock function for the type MockTime
func (_mock *MockTime) Sleep(duration time.Duration) {
	_mock.Called(duration)
	return
}

// MockTime_Sleep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sleep'
type MockTime_Sleep_Call struct {
	*mock.Call
}

// Sleep is a helper method to define mock.On call
//   - duration
func (_e *MockTime_Expecter) Sleep(duration interface{}) *MockTime_Sleep_Call {
	return &MockTime_Sleep_Call{Call: _e.mock.On("Sleep", duration)}
}

func (_c *MockTime_Sleep_Call) Run(run func(duration time.Duration)) *MockTime_Sleep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockTime_Sleep_Call) Return() *MockTime_Sleep_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTime_Sleep_Call) RunAndReturn(run func(duration time.Duration)) *MockTime_Sleep_Call {
	_c.Run(run)
	return _c
}
