// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package api_test

import (
	"context"
	"github.com/codesphere-cloud/cs-go/api/openapi_client"
	mock "github.com/stretchr/testify/mock"
	"net/http"
)

// NewMockWorkspaceAPI creates a new instance of MockWorkspaceAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkspaceAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkspaceAPI {
	mock := &MockWorkspaceAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWorkspaceAPI is an autogenerated mock type for the WorkspaceAPI type
type MockWorkspaceAPI struct {
	mock.Mock
}

type MockWorkspaceAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkspaceAPI) EXPECT() *MockWorkspaceAPI_Expecter {
	return &MockWorkspaceAPI_Expecter{mock: &_m.Mock}
}

// WorkspacesCreateWorkspace provides a mock function for the type MockWorkspaceAPI
func (_mock *MockWorkspaceAPI) WorkspacesCreateWorkspace(context1 context.Context) openapi_client.ApiWorkspacesCreateWorkspaceRequest {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesCreateWorkspace")
	}

	var r0 openapi_client.ApiWorkspacesCreateWorkspaceRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) openapi_client.ApiWorkspacesCreateWorkspaceRequest); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Get(0).(openapi_client.ApiWorkspacesCreateWorkspaceRequest)
	}
	return r0
}

// MockWorkspaceAPI_WorkspacesCreateWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesCreateWorkspace'
type MockWorkspaceAPI_WorkspacesCreateWorkspace_Call struct {
	*mock.Call
}

// WorkspacesCreateWorkspace is a helper method to define mock.On call
//   - context1
func (_e *MockWorkspaceAPI_Expecter) WorkspacesCreateWorkspace(context1 interface{}) *MockWorkspaceAPI_WorkspacesCreateWorkspace_Call {
	return &MockWorkspaceAPI_WorkspacesCreateWorkspace_Call{Call: _e.mock.On("WorkspacesCreateWorkspace", context1)}
}

func (_c *MockWorkspaceAPI_WorkspacesCreateWorkspace_Call) Run(run func(context1 context.Context)) *MockWorkspaceAPI_WorkspacesCreateWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWorkspaceAPI_WorkspacesCreateWorkspace_Call) Return(apiWorkspacesCreateWorkspaceRequest openapi_client.ApiWorkspacesCreateWorkspaceRequest) *MockWorkspaceAPI_WorkspacesCreateWorkspace_Call {
	_c.Call.Return(apiWorkspacesCreateWorkspaceRequest)
	return _c
}

func (_c *MockWorkspaceAPI_WorkspacesCreateWorkspace_Call) RunAndReturn(run func(context1 context.Context) openapi_client.ApiWorkspacesCreateWorkspaceRequest) *MockWorkspaceAPI_WorkspacesCreateWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesGetWorkspaceStatus provides a mock function for the type MockWorkspaceAPI
func (_mock *MockWorkspaceAPI) WorkspacesGetWorkspaceStatus(context1 context.Context, f float32) openapi_client.ApiWorkspacesGetWorkspaceStatusRequest {
	ret := _mock.Called(context1, f)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesGetWorkspaceStatus")
	}

	var r0 openapi_client.ApiWorkspacesGetWorkspaceStatusRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) openapi_client.ApiWorkspacesGetWorkspaceStatusRequest); ok {
		r0 = returnFunc(context1, f)
	} else {
		r0 = ret.Get(0).(openapi_client.ApiWorkspacesGetWorkspaceStatusRequest)
	}
	return r0
}

// MockWorkspaceAPI_WorkspacesGetWorkspaceStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesGetWorkspaceStatus'
type MockWorkspaceAPI_WorkspacesGetWorkspaceStatus_Call struct {
	*mock.Call
}

// WorkspacesGetWorkspaceStatus is a helper method to define mock.On call
//   - context1
//   - f
func (_e *MockWorkspaceAPI_Expecter) WorkspacesGetWorkspaceStatus(context1 interface{}, f interface{}) *MockWorkspaceAPI_WorkspacesGetWorkspaceStatus_Call {
	return &MockWorkspaceAPI_WorkspacesGetWorkspaceStatus_Call{Call: _e.mock.On("WorkspacesGetWorkspaceStatus", context1, f)}
}

func (_c *MockWorkspaceAPI_WorkspacesGetWorkspaceStatus_Call) Run(run func(context1 context.Context, f float32)) *MockWorkspaceAPI_WorkspacesGetWorkspaceStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspaceAPI_WorkspacesGetWorkspaceStatus_Call) Return(apiWorkspacesGetWorkspaceStatusRequest openapi_client.ApiWorkspacesGetWorkspaceStatusRequest) *MockWorkspaceAPI_WorkspacesGetWorkspaceStatus_Call {
	_c.Call.Return(apiWorkspacesGetWorkspaceStatusRequest)
	return _c
}

func (_c *MockWorkspaceAPI_WorkspacesGetWorkspaceStatus_Call) RunAndReturn(run func(context1 context.Context, f float32) openapi_client.ApiWorkspacesGetWorkspaceStatusRequest) *MockWorkspaceAPI_WorkspacesGetWorkspaceStatus_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesListWorkspaces provides a mock function for the type MockWorkspaceAPI
func (_mock *MockWorkspaceAPI) WorkspacesListWorkspaces(context1 context.Context, f float32) openapi_client.ApiWorkspacesListWorkspacesRequest {
	ret := _mock.Called(context1, f)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesListWorkspaces")
	}

	var r0 openapi_client.ApiWorkspacesListWorkspacesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) openapi_client.ApiWorkspacesListWorkspacesRequest); ok {
		r0 = returnFunc(context1, f)
	} else {
		r0 = ret.Get(0).(openapi_client.ApiWorkspacesListWorkspacesRequest)
	}
	return r0
}

// MockWorkspaceAPI_WorkspacesListWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesListWorkspaces'
type MockWorkspaceAPI_WorkspacesListWorkspaces_Call struct {
	*mock.Call
}

// WorkspacesListWorkspaces is a helper method to define mock.On call
//   - context1
//   - f
func (_e *MockWorkspaceAPI_Expecter) WorkspacesListWorkspaces(context1 interface{}, f interface{}) *MockWorkspaceAPI_WorkspacesListWorkspaces_Call {
	return &MockWorkspaceAPI_WorkspacesListWorkspaces_Call{Call: _e.mock.On("WorkspacesListWorkspaces", context1, f)}
}

func (_c *MockWorkspaceAPI_WorkspacesListWorkspaces_Call) Run(run func(context1 context.Context, f float32)) *MockWorkspaceAPI_WorkspacesListWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspaceAPI_WorkspacesListWorkspaces_Call) Return(apiWorkspacesListWorkspacesRequest openapi_client.ApiWorkspacesListWorkspacesRequest) *MockWorkspaceAPI_WorkspacesListWorkspaces_Call {
	_c.Call.Return(apiWorkspacesListWorkspacesRequest)
	return _c
}

func (_c *MockWorkspaceAPI_WorkspacesListWorkspaces_Call) RunAndReturn(run func(context1 context.Context, f float32) openapi_client.ApiWorkspacesListWorkspacesRequest) *MockWorkspaceAPI_WorkspacesListWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesListWorkspacesExecute provides a mock function for the type MockWorkspaceAPI
func (_mock *MockWorkspaceAPI) WorkspacesListWorkspacesExecute(apiWorkspacesListWorkspacesRequest openapi_client.ApiWorkspacesListWorkspacesRequest) ([]openapi_client.WorkspacesGetWorkspace200Response, *http.Response, error) {
	ret := _mock.Called(apiWorkspacesListWorkspacesRequest)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesListWorkspacesExecute")
	}

	var r0 []openapi_client.WorkspacesGetWorkspace200Response
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(openapi_client.ApiWorkspacesListWorkspacesRequest) ([]openapi_client.WorkspacesGetWorkspace200Response, *http.Response, error)); ok {
		return returnFunc(apiWorkspacesListWorkspacesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(openapi_client.ApiWorkspacesListWorkspacesRequest) []openapi_client.WorkspacesGetWorkspace200Response); ok {
		r0 = returnFunc(apiWorkspacesListWorkspacesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]openapi_client.WorkspacesGetWorkspace200Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(openapi_client.ApiWorkspacesListWorkspacesRequest) *http.Response); ok {
		r1 = returnFunc(apiWorkspacesListWorkspacesRequest)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(openapi_client.ApiWorkspacesListWorkspacesRequest) error); ok {
		r2 = returnFunc(apiWorkspacesListWorkspacesRequest)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWorkspaceAPI_WorkspacesListWorkspacesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesListWorkspacesExecute'
type MockWorkspaceAPI_WorkspacesListWorkspacesExecute_Call struct {
	*mock.Call
}

// WorkspacesListWorkspacesExecute is a helper method to define mock.On call
//   - apiWorkspacesListWorkspacesRequest
func (_e *MockWorkspaceAPI_Expecter) WorkspacesListWorkspacesExecute(apiWorkspacesListWorkspacesRequest interface{}) *MockWorkspaceAPI_WorkspacesListWorkspacesExecute_Call {
	return &MockWorkspaceAPI_WorkspacesListWorkspacesExecute_Call{Call: _e.mock.On("WorkspacesListWorkspacesExecute", apiWorkspacesListWorkspacesRequest)}
}

func (_c *MockWorkspaceAPI_WorkspacesListWorkspacesExecute_Call) Run(run func(apiWorkspacesListWorkspacesRequest openapi_client.ApiWorkspacesListWorkspacesRequest)) *MockWorkspaceAPI_WorkspacesListWorkspacesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(openapi_client.ApiWorkspacesListWorkspacesRequest))
	})
	return _c
}

func (_c *MockWorkspaceAPI_WorkspacesListWorkspacesExecute_Call) Return(workspacesGetWorkspace200Responses []openapi_client.WorkspacesGetWorkspace200Response, response *http.Response, err error) *MockWorkspaceAPI_WorkspacesListWorkspacesExecute_Call {
	_c.Call.Return(workspacesGetWorkspace200Responses, response, err)
	return _c
}

func (_c *MockWorkspaceAPI_WorkspacesListWorkspacesExecute_Call) RunAndReturn(run func(apiWorkspacesListWorkspacesRequest openapi_client.ApiWorkspacesListWorkspacesRequest) ([]openapi_client.WorkspacesGetWorkspace200Response, *http.Response, error)) *MockWorkspaceAPI_WorkspacesListWorkspacesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WorkspacesSetEnvVar provides a mock function for the type MockWorkspaceAPI
func (_mock *MockWorkspaceAPI) WorkspacesSetEnvVar(context1 context.Context, f float32) openapi_client.ApiWorkspacesSetEnvVarRequest {
	ret := _mock.Called(context1, f)

	if len(ret) == 0 {
		panic("no return value specified for WorkspacesSetEnvVar")
	}

	var r0 openapi_client.ApiWorkspacesSetEnvVarRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, float32) openapi_client.ApiWorkspacesSetEnvVarRequest); ok {
		r0 = returnFunc(context1, f)
	} else {
		r0 = ret.Get(0).(openapi_client.ApiWorkspacesSetEnvVarRequest)
	}
	return r0
}

// MockWorkspaceAPI_WorkspacesSetEnvVar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkspacesSetEnvVar'
type MockWorkspaceAPI_WorkspacesSetEnvVar_Call struct {
	*mock.Call
}

// WorkspacesSetEnvVar is a helper method to define mock.On call
//   - context1
//   - f
func (_e *MockWorkspaceAPI_Expecter) WorkspacesSetEnvVar(context1 interface{}, f interface{}) *MockWorkspaceAPI_WorkspacesSetEnvVar_Call {
	return &MockWorkspaceAPI_WorkspacesSetEnvVar_Call{Call: _e.mock.On("WorkspacesSetEnvVar", context1, f)}
}

func (_c *MockWorkspaceAPI_WorkspacesSetEnvVar_Call) Run(run func(context1 context.Context, f float32)) *MockWorkspaceAPI_WorkspacesSetEnvVar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float32))
	})
	return _c
}

func (_c *MockWorkspaceAPI_WorkspacesSetEnvVar_Call) Return(apiWorkspacesSetEnvVarRequest openapi_client.ApiWorkspacesSetEnvVarRequest) *MockWorkspaceAPI_WorkspacesSetEnvVar_Call {
	_c.Call.Return(apiWorkspacesSetEnvVarRequest)
	return _c
}

func (_c *MockWorkspaceAPI_WorkspacesSetEnvVar_Call) RunAndReturn(run func(context1 context.Context, f float32) openapi_client.ApiWorkspacesSetEnvVarRequest) *MockWorkspaceAPI_WorkspacesSetEnvVar_Call {
	_c.Call.Return(run)
	return _c
}
