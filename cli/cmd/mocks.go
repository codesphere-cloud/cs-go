// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cmd

import (
	"github.com/codesphere-cloud/cs-go/api"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// DeleteWorkspace provides a mock function for the type MockClient
func (_mock *MockClient) DeleteWorkspace(wsId int) error {
	ret := _mock.Called(wsId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspace")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(wsId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_DeleteWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkspace'
type MockClient_DeleteWorkspace_Call struct {
	*mock.Call
}

// DeleteWorkspace is a helper method to define mock.On call
//   - wsId
func (_e *MockClient_Expecter) DeleteWorkspace(wsId interface{}) *MockClient_DeleteWorkspace_Call {
	return &MockClient_DeleteWorkspace_Call{Call: _e.mock.On("DeleteWorkspace", wsId)}
}

func (_c *MockClient_DeleteWorkspace_Call) Run(run func(wsId int)) *MockClient_DeleteWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockClient_DeleteWorkspace_Call) Return(err error) *MockClient_DeleteWorkspace_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_DeleteWorkspace_Call) RunAndReturn(run func(wsId int) error) *MockClient_DeleteWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// DeployWorkspace provides a mock function for the type MockClient
func (_mock *MockClient) DeployWorkspace(args api.DeployWorkspaceArgs) (*api.Workspace, error) {
	ret := _mock.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for DeployWorkspace")
	}

	var r0 *api.Workspace
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(api.DeployWorkspaceArgs) (*api.Workspace, error)); ok {
		return returnFunc(args)
	}
	if returnFunc, ok := ret.Get(0).(func(api.DeployWorkspaceArgs) *api.Workspace); ok {
		r0 = returnFunc(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Workspace)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(api.DeployWorkspaceArgs) error); ok {
		r1 = returnFunc(args)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DeployWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeployWorkspace'
type MockClient_DeployWorkspace_Call struct {
	*mock.Call
}

// DeployWorkspace is a helper method to define mock.On call
//   - args
func (_e *MockClient_Expecter) DeployWorkspace(args interface{}) *MockClient_DeployWorkspace_Call {
	return &MockClient_DeployWorkspace_Call{Call: _e.mock.On("DeployWorkspace", args)}
}

func (_c *MockClient_DeployWorkspace_Call) Run(run func(args api.DeployWorkspaceArgs)) *MockClient_DeployWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.DeployWorkspaceArgs))
	})
	return _c
}

func (_c *MockClient_DeployWorkspace_Call) Return(v *api.Workspace, err error) *MockClient_DeployWorkspace_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockClient_DeployWorkspace_Call) RunAndReturn(run func(args api.DeployWorkspaceArgs) (*api.Workspace, error)) *MockClient_DeployWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCommand provides a mock function for the type MockClient
func (_mock *MockClient) ExecCommand(workspaceId int, command string, workdir string, env map[string]string) (string, string, error) {
	ret := _mock.Called(workspaceId, command, workdir, env)

	if len(ret) == 0 {
		panic("no return value specified for ExecCommand")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(int, string, string, map[string]string) (string, string, error)); ok {
		return returnFunc(workspaceId, command, workdir, env)
	}
	if returnFunc, ok := ret.Get(0).(func(int, string, string, map[string]string) string); ok {
		r0 = returnFunc(workspaceId, command, workdir, env)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(int, string, string, map[string]string) string); ok {
		r1 = returnFunc(workspaceId, command, workdir, env)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(int, string, string, map[string]string) error); ok {
		r2 = returnFunc(workspaceId, command, workdir, env)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockClient_ExecCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCommand'
type MockClient_ExecCommand_Call struct {
	*mock.Call
}

// ExecCommand is a helper method to define mock.On call
//   - workspaceId
//   - command
//   - workdir
//   - env
func (_e *MockClient_Expecter) ExecCommand(workspaceId interface{}, command interface{}, workdir interface{}, env interface{}) *MockClient_ExecCommand_Call {
	return &MockClient_ExecCommand_Call{Call: _e.mock.On("ExecCommand", workspaceId, command, workdir, env)}
}

func (_c *MockClient_ExecCommand_Call) Run(run func(workspaceId int, command string, workdir string, env map[string]string)) *MockClient_ExecCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockClient_ExecCommand_Call) Return(s string, s1 string, err error) *MockClient_ExecCommand_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *MockClient_ExecCommand_Call) RunAndReturn(run func(workspaceId int, command string, workdir string, env map[string]string) (string, string, error)) *MockClient_ExecCommand_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineState provides a mock function for the type MockClient
func (_mock *MockClient) GetPipelineState(wsId int, stage string) ([]api.PipelineStatus, error) {
	ret := _mock.Called(wsId, stage)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineState")
	}

	var r0 []api.PipelineStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, string) ([]api.PipelineStatus, error)); ok {
		return returnFunc(wsId, stage)
	}
	if returnFunc, ok := ret.Get(0).(func(int, string) []api.PipelineStatus); ok {
		r0 = returnFunc(wsId, stage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.PipelineStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = returnFunc(wsId, stage)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPipelineState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineState'
type MockClient_GetPipelineState_Call struct {
	*mock.Call
}

// GetPipelineState is a helper method to define mock.On call
//   - wsId
//   - stage
func (_e *MockClient_Expecter) GetPipelineState(wsId interface{}, stage interface{}) *MockClient_GetPipelineState_Call {
	return &MockClient_GetPipelineState_Call{Call: _e.mock.On("GetPipelineState", wsId, stage)}
}

func (_c *MockClient_GetPipelineState_Call) Run(run func(wsId int, stage string)) *MockClient_GetPipelineState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetPipelineState_Call) Return(vs []api.PipelineStatus, err error) *MockClient_GetPipelineState_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockClient_GetPipelineState_Call) RunAndReturn(run func(wsId int, stage string) ([]api.PipelineStatus, error)) *MockClient_GetPipelineState_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspace provides a mock function for the type MockClient
func (_mock *MockClient) GetWorkspace(workspaceId int) (api.Workspace, error) {
	ret := _mock.Called(workspaceId)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspace")
	}

	var r0 api.Workspace
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (api.Workspace, error)); ok {
		return returnFunc(workspaceId)
	}
	if returnFunc, ok := ret.Get(0).(func(int) api.Workspace); ok {
		r0 = returnFunc(workspaceId)
	} else {
		r0 = ret.Get(0).(api.Workspace)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(workspaceId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspace'
type MockClient_GetWorkspace_Call struct {
	*mock.Call
}

// GetWorkspace is a helper method to define mock.On call
//   - workspaceId
func (_e *MockClient_Expecter) GetWorkspace(workspaceId interface{}) *MockClient_GetWorkspace_Call {
	return &MockClient_GetWorkspace_Call{Call: _e.mock.On("GetWorkspace", workspaceId)}
}

func (_c *MockClient_GetWorkspace_Call) Run(run func(workspaceId int)) *MockClient_GetWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockClient_GetWorkspace_Call) Return(v api.Workspace, err error) *MockClient_GetWorkspace_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockClient_GetWorkspace_Call) RunAndReturn(run func(workspaceId int) (api.Workspace, error)) *MockClient_GetWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// GitPull provides a mock function for the type MockClient
func (_mock *MockClient) GitPull(wsId int, remote string, branch string) error {
	ret := _mock.Called(wsId, remote, branch)

	if len(ret) == 0 {
		panic("no return value specified for GitPull")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = returnFunc(wsId, remote, branch)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_GitPull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GitPull'
type MockClient_GitPull_Call struct {
	*mock.Call
}

// GitPull is a helper method to define mock.On call
//   - wsId
//   - remote
//   - branch
func (_e *MockClient_Expecter) GitPull(wsId interface{}, remote interface{}, branch interface{}) *MockClient_GitPull_Call {
	return &MockClient_GitPull_Call{Call: _e.mock.On("GitPull", wsId, remote, branch)}
}

func (_c *MockClient_GitPull_Call) Run(run func(wsId int, remote string, branch string)) *MockClient_GitPull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_GitPull_Call) Return(err error) *MockClient_GitPull_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_GitPull_Call) RunAndReturn(run func(wsId int, remote string, branch string) error) *MockClient_GitPull_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeams provides a mock function for the type MockClient
func (_mock *MockClient) ListTeams() ([]api.Team, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListTeams")
	}

	var r0 []api.Team
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]api.Team, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []api.Team); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeams'
type MockClient_ListTeams_Call struct {
	*mock.Call
}

// ListTeams is a helper method to define mock.On call
func (_e *MockClient_Expecter) ListTeams() *MockClient_ListTeams_Call {
	return &MockClient_ListTeams_Call{Call: _e.mock.On("ListTeams")}
}

func (_c *MockClient_ListTeams_Call) Run(run func()) *MockClient_ListTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_ListTeams_Call) Return(vs []api.Team, err error) *MockClient_ListTeams_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockClient_ListTeams_Call) RunAndReturn(run func() ([]api.Team, error)) *MockClient_ListTeams_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkspacePlans provides a mock function for the type MockClient
func (_mock *MockClient) ListWorkspacePlans() ([]api.WorkspacePlan, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspacePlans")
	}

	var r0 []api.WorkspacePlan
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]api.WorkspacePlan, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []api.WorkspacePlan); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.WorkspacePlan)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListWorkspacePlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkspacePlans'
type MockClient_ListWorkspacePlans_Call struct {
	*mock.Call
}

// ListWorkspacePlans is a helper method to define mock.On call
func (_e *MockClient_Expecter) ListWorkspacePlans() *MockClient_ListWorkspacePlans_Call {
	return &MockClient_ListWorkspacePlans_Call{Call: _e.mock.On("ListWorkspacePlans")}
}

func (_c *MockClient_ListWorkspacePlans_Call) Run(run func()) *MockClient_ListWorkspacePlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_ListWorkspacePlans_Call) Return(vs []api.WorkspacePlan, err error) *MockClient_ListWorkspacePlans_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockClient_ListWorkspacePlans_Call) RunAndReturn(run func() ([]api.WorkspacePlan, error)) *MockClient_ListWorkspacePlans_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkspaces provides a mock function for the type MockClient
func (_mock *MockClient) ListWorkspaces(teamId int) ([]api.Workspace, error) {
	ret := _mock.Called(teamId)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspaces")
	}

	var r0 []api.Workspace
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) ([]api.Workspace, error)); ok {
		return returnFunc(teamId)
	}
	if returnFunc, ok := ret.Get(0).(func(int) []api.Workspace); ok {
		r0 = returnFunc(teamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Workspace)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(teamId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkspaces'
type MockClient_ListWorkspaces_Call struct {
	*mock.Call
}

// ListWorkspaces is a helper method to define mock.On call
//   - teamId
func (_e *MockClient_Expecter) ListWorkspaces(teamId interface{}) *MockClient_ListWorkspaces_Call {
	return &MockClient_ListWorkspaces_Call{Call: _e.mock.On("ListWorkspaces", teamId)}
}

func (_c *MockClient_ListWorkspaces_Call) Run(run func(teamId int)) *MockClient_ListWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockClient_ListWorkspaces_Call) Return(vs []api.Workspace, err error) *MockClient_ListWorkspaces_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockClient_ListWorkspaces_Call) RunAndReturn(run func(teamId int) ([]api.Workspace, error)) *MockClient_ListWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// SetEnvVarOnWorkspace provides a mock function for the type MockClient
func (_mock *MockClient) SetEnvVarOnWorkspace(workspaceId int, vars map[string]string) error {
	ret := _mock.Called(workspaceId, vars)

	if len(ret) == 0 {
		panic("no return value specified for SetEnvVarOnWorkspace")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, map[string]string) error); ok {
		r0 = returnFunc(workspaceId, vars)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_SetEnvVarOnWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEnvVarOnWorkspace'
type MockClient_SetEnvVarOnWorkspace_Call struct {
	*mock.Call
}

// SetEnvVarOnWorkspace is a helper method to define mock.On call
//   - workspaceId
//   - vars
func (_e *MockClient_Expecter) SetEnvVarOnWorkspace(workspaceId interface{}, vars interface{}) *MockClient_SetEnvVarOnWorkspace_Call {
	return &MockClient_SetEnvVarOnWorkspace_Call{Call: _e.mock.On("SetEnvVarOnWorkspace", workspaceId, vars)}
}

func (_c *MockClient_SetEnvVarOnWorkspace_Call) Run(run func(workspaceId int, vars map[string]string)) *MockClient_SetEnvVarOnWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(map[string]string))
	})
	return _c
}

func (_c *MockClient_SetEnvVarOnWorkspace_Call) Return(err error) *MockClient_SetEnvVarOnWorkspace_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_SetEnvVarOnWorkspace_Call) RunAndReturn(run func(workspaceId int, vars map[string]string) error) *MockClient_SetEnvVarOnWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// StartPipelineStage provides a mock function for the type MockClient
func (_mock *MockClient) StartPipelineStage(wsId int, profile string, stage string) error {
	ret := _mock.Called(wsId, profile, stage)

	if len(ret) == 0 {
		panic("no return value specified for StartPipelineStage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = returnFunc(wsId, profile, stage)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_StartPipelineStage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartPipelineStage'
type MockClient_StartPipelineStage_Call struct {
	*mock.Call
}

// StartPipelineStage is a helper method to define mock.On call
//   - wsId
//   - profile
//   - stage
func (_e *MockClient_Expecter) StartPipelineStage(wsId interface{}, profile interface{}, stage interface{}) *MockClient_StartPipelineStage_Call {
	return &MockClient_StartPipelineStage_Call{Call: _e.mock.On("StartPipelineStage", wsId, profile, stage)}
}

func (_c *MockClient_StartPipelineStage_Call) Run(run func(wsId int, profile string, stage string)) *MockClient_StartPipelineStage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_StartPipelineStage_Call) Return(err error) *MockClient_StartPipelineStage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_StartPipelineStage_Call) RunAndReturn(run func(wsId int, profile string, stage string) error) *MockClient_StartPipelineStage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPrompt creates a new instance of MockPrompt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrompt(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrompt {
	mock := &MockPrompt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPrompt is an autogenerated mock type for the Prompt type
type MockPrompt struct {
	mock.Mock
}

type MockPrompt_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrompt) EXPECT() *MockPrompt_Expecter {
	return &MockPrompt_Expecter{mock: &_m.Mock}
}

// InputPrompt provides a mock function for the type MockPrompt
func (_mock *MockPrompt) InputPrompt(prompt string) string {
	ret := _mock.Called(prompt)

	if len(ret) == 0 {
		panic("no return value specified for InputPrompt")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(prompt)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPrompt_InputPrompt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InputPrompt'
type MockPrompt_InputPrompt_Call struct {
	*mock.Call
}

// InputPrompt is a helper method to define mock.On call
//   - prompt
func (_e *MockPrompt_Expecter) InputPrompt(prompt interface{}) *MockPrompt_InputPrompt_Call {
	return &MockPrompt_InputPrompt_Call{Call: _e.mock.On("InputPrompt", prompt)}
}

func (_c *MockPrompt_InputPrompt_Call) Run(run func(prompt string)) *MockPrompt_InputPrompt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPrompt_InputPrompt_Call) Return(s string) *MockPrompt_InputPrompt_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPrompt_InputPrompt_Call) RunAndReturn(run func(prompt string) string) *MockPrompt_InputPrompt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBrowser creates a new instance of MockBrowser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBrowser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBrowser {
	mock := &MockBrowser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBrowser is an autogenerated mock type for the Browser type
type MockBrowser struct {
	mock.Mock
}

type MockBrowser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBrowser) EXPECT() *MockBrowser_Expecter {
	return &MockBrowser_Expecter{mock: &_m.Mock}
}

// OpenIde provides a mock function for the type MockBrowser
func (_mock *MockBrowser) OpenIde(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for OpenIde")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBrowser_OpenIde_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenIde'
type MockBrowser_OpenIde_Call struct {
	*mock.Call
}

// OpenIde is a helper method to define mock.On call
//   - path
func (_e *MockBrowser_Expecter) OpenIde(path interface{}) *MockBrowser_OpenIde_Call {
	return &MockBrowser_OpenIde_Call{Call: _e.mock.On("OpenIde", path)}
}

func (_c *MockBrowser_OpenIde_Call) Run(run func(path string)) *MockBrowser_OpenIde_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBrowser_OpenIde_Call) Return(err error) *MockBrowser_OpenIde_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBrowser_OpenIde_Call) RunAndReturn(run func(path string) error) *MockBrowser_OpenIde_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEnv creates a new instance of MockEnv. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnv(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnv {
	mock := &MockEnv{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEnv is an autogenerated mock type for the Env type
type MockEnv struct {
	mock.Mock
}

type MockEnv_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnv) EXPECT() *MockEnv_Expecter {
	return &MockEnv_Expecter{mock: &_m.Mock}
}

// GetApiToken provides a mock function for the type MockEnv
func (_mock *MockEnv) GetApiToken() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApiToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnv_GetApiToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiToken'
type MockEnv_GetApiToken_Call struct {
	*mock.Call
}

// GetApiToken is a helper method to define mock.On call
func (_e *MockEnv_Expecter) GetApiToken() *MockEnv_GetApiToken_Call {
	return &MockEnv_GetApiToken_Call{Call: _e.mock.On("GetApiToken")}
}

func (_c *MockEnv_GetApiToken_Call) Run(run func()) *MockEnv_GetApiToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnv_GetApiToken_Call) Return(s string, err error) *MockEnv_GetApiToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEnv_GetApiToken_Call) RunAndReturn(run func() (string, error)) *MockEnv_GetApiToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiUrl provides a mock function for the type MockEnv
func (_mock *MockEnv) GetApiUrl() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApiUrl")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEnv_GetApiUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiUrl'
type MockEnv_GetApiUrl_Call struct {
	*mock.Call
}

// GetApiUrl is a helper method to define mock.On call
func (_e *MockEnv_Expecter) GetApiUrl() *MockEnv_GetApiUrl_Call {
	return &MockEnv_GetApiUrl_Call{Call: _e.mock.On("GetApiUrl")}
}

func (_c *MockEnv_GetApiUrl_Call) Run(run func()) *MockEnv_GetApiUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnv_GetApiUrl_Call) Return(s string) *MockEnv_GetApiUrl_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEnv_GetApiUrl_Call) RunAndReturn(run func() string) *MockEnv_GetApiUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamId provides a mock function for the type MockEnv
func (_mock *MockEnv) GetTeamId() (int, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTeamId")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnv_GetTeamId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamId'
type MockEnv_GetTeamId_Call struct {
	*mock.Call
}

// GetTeamId is a helper method to define mock.On call
func (_e *MockEnv_Expecter) GetTeamId() *MockEnv_GetTeamId_Call {
	return &MockEnv_GetTeamId_Call{Call: _e.mock.On("GetTeamId")}
}

func (_c *MockEnv_GetTeamId_Call) Run(run func()) *MockEnv_GetTeamId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnv_GetTeamId_Call) Return(n int, err error) *MockEnv_GetTeamId_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockEnv_GetTeamId_Call) RunAndReturn(run func() (int, error)) *MockEnv_GetTeamId_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceId provides a mock function for the type MockEnv
func (_mock *MockEnv) GetWorkspaceId() (int, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceId")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnv_GetWorkspaceId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceId'
type MockEnv_GetWorkspaceId_Call struct {
	*mock.Call
}

// GetWorkspaceId is a helper method to define mock.On call
func (_e *MockEnv_Expecter) GetWorkspaceId() *MockEnv_GetWorkspaceId_Call {
	return &MockEnv_GetWorkspaceId_Call{Call: _e.mock.On("GetWorkspaceId")}
}

func (_c *MockEnv_GetWorkspaceId_Call) Run(run func()) *MockEnv_GetWorkspaceId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnv_GetWorkspaceId_Call) Return(n int, err error) *MockEnv_GetWorkspaceId_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockEnv_GetWorkspaceId_Call) RunAndReturn(run func() (int, error)) *MockEnv_GetWorkspaceId_Call {
	_c.Call.Return(run)
	return _c
}
